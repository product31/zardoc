<?php

/**
 * Implementation of hook_menu().
 */
function opendisc_menu() {

  $items['admin/settings/opendisc'] = array(
    'title' => 'OpenDisc Settings',
    'description' => 'Configure the OpenDisc settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opendisc_settings'),
    'access arguments' => array('administer opendisc settings'),
  );

  $items['opendisc'] = array(
    'title' => 'OpenDisc Exclusive Access',
    'page callback' => 'opendisc_landing_page',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function opendisc_perm() {
  return array('administer opendisc settings');
}

/**
 * Settings page form.
 */
function opendisc_settings() {
  // Check if email verification is on. If it is, it can interrupt the login process.
  if (variable_get('user_email_verification', FALSE)) {
    drupal_set_message(t('User email verification is enabled on the <a href="@user_link">User Settings page</a>. If users have to verify their emails, they may not be able to directly access the exclusive content without re-inserting their OpenDisc CD. Disable e-mail verification to hide this warning.', array('@user_link' => url('admin/user/settings'))), 'warning');
  }

  $form = array();

  $form['required_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Required Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['required_fields']['opendisc_redirect_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect URL After Successful Login'),
    '#description' => t('After logging in, users will be redirected to this page. It should be in the form of a relative Drupal URL, like <strong>node/5</strong> or <strong>user/profile</strong>, but not <strong>http://mysite.com/page</strong>.'),
    '#required' => TRUE,
    '#default_value' => variable_get('opendisc_redirect_url', 'node'),
  );

  $form['required_fields']['opendisc_access_role'] = array(
    '#type' => 'select',
    '#title' => t('Granted Role After Registration'),
    '#description' => t('Select a role to be assigned to users after they are validated by OpenDisc and sign on.'),
    '#options' => user_roles(TRUE),
    '#default_value' => variable_get('opendisc_access_role', ''),
    '#required' => TRUE,
  );

  // profile fields
  $form['profile_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Associate OpenDisc data to Profile fields'),
    '#description' => t("When a user is validated with OpenDisc, either while logging in or creating a new account, their Drupal profile data will be updated to use data from OpenDisc. Select which fields to use to store the first and last names."),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  if (module_exists('profile')) {
    // get profile fields
    $fields = array('' => '');
    $result = db_query("SELECT fid, title FROM {profile_fields} ORDER BY title ASC");
    while ($row = db_fetch_array($result)) {
      $fields[$row['fid']] = $row['title'];
    }

    $form['profile_fields']['opendisc_firstname_field'] = array(
      '#type' => 'select',
      '#title' => t('First Name field'),
      '#options' => $fields,
      '#default_value' => variable_get('opendisc_firstname_field', ''),
    );

    $form['profile_fields']['opendisc_lastname_field'] = array(
      '#type' => 'select',
      '#title' => t('Last Name field'),
      '#options' => $fields,
      '#default_value' => variable_get('opendisc_lastname_field', ''),
    );
  }
  else {
    $form['profile_fields']['profile_error'] = array(
      '#value' => t('<a href="@url">You need to enable the Profile module before using this feature.</a>', array('@url' => url('admin/build/modules'))),
    );
  }

  $form['profile_fields']['opendisc_overwrite_user_email'] = array(
    '#type' => 'checkbox',
    '#title' => t('Overwrite the user account\'s email address with the one from OpenDisc?'),
    '#default_value' => variable_get('opendisc_overwrite_user_email', TRUE),
  );

  // custom error messages
  $form['custom_errors'] = array(
    '#type' => 'fieldset',
    '#title' => t('Custom Error Messages'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['custom_errors']['opendisc_error_not_logged_in'] = array(
    '#type' => 'textarea',
    '#title' => t('Notice above login page when not logged in'),
    '#default_value' => variable_get('opendisc_error_not_logged_in', t('You need to login or create an account before you can view the exclusive content.')),
  );

  $form['custom_errors']['opendisc_error_no_access_role'] = array(
    '#type' => 'textarea',
    '#title' => t('Error displayed if no granted role has been set'),
    '#default_value' => variable_get('opendisc_error_no_access_role', t('No access role has been set, please contact the site administrator to configure the OpenDisc module.')),
  );

  $form['custom_errors']['opendisc_error_not_authenticated'] = array(
    '#type' => 'textarea',
    '#title' => t('Error displayed if OpenDisc authentication fails'),
    '#default_value' => variable_get('opendisc_error_not_authenticated', t('Your account has not been validated by by OpenDisc. Please re-insert your OpenDisc CD and try again.')),
  );

  $form['custom_errors']['_token'] = array(
    '#type' => 'fieldset',
    '#title' => t('Replacement tokens'),
    '#value' => theme('token_help', 'opendisc'),
  );

  // optional fields
  $form['optional'] = array(
    '#type' => 'fieldset',
    '#title' => t('Optional Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  /*
  $form['optional']['opendisc_email_administrator'] = array(
    '#type' => 'textfield',
    '#title' => t('Administrator Email Address'),
    '#description' => t('When OpenDisc technical staff need to contact you, they will send a message to this address. It is displayed when the opendisc.inc.php script is called with "?info=1".'),
    '#default_value' => variable_get('opendisc_email_administrator', ''),
  );
 */

  $form['optional']['opendisc_local_error_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Error URL'),
    '#description' => t('A URL for a custom error page, instead of a default OpenDisc error page.<br />Include <strong>http://</strong> and a trailing slash, like <strong>http://www.mydomain.com/error</strong>'),
    '#default_value' => variable_get('opendisc_local_error_url', ''),
  );

  $form['optional']['opendisc_anonymous_error_upc'] = array(
    '#type' => 'textfield',
    '#title' => t('Anonymous Error UPC'),
    '#description' => t('An extra code to customize the error screen. If you don\'t know what this is, you can leave it blank.'),
    '#default_value' => variable_get('opendisc_anonymous_error_upc', ''),
  );

  $form['optional']['opendisc_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Debugging'),
    '#default_value' => variable_get('opendisc_debug', FALSE),
  );

  return system_settings_form($form);
}

/**
 * When users finish registering with OpenDisc, they're sent to this page
 * which checks if they're already logged in. If not, it redirects them to
 * the login page. Otherwise, it validates their account with OpenDisc and
 * sets the appropriate roles.
 *
 * This way, we only need to contact OpenDisc when
 *  a) a user comes to this landing page
 *  b) a user logs in
 *
 * Otherwise we'd need to check with OpenDisc whenever a logged-in user did anything.
 *
 */
function opendisc_landing_page() {

  // Check their OpenDisc credentials
  require_once(drupal_get_path('module', 'opendisc') . '/opendisc/opendisc.inc.php');
  //watchdog('opendisc', 'cookie: ' . print_r($_COOKIE, true));

  // If the user isn't logged in, redirect to the login page and then back here.
  global $user;
  if (!$user->uid) {
    $message = variable_get('opendisc_error_not_logged_in', t('You need to login or create an account before you can view the exclusive content.'));
    $message = token_replace($message, 'opendisc');
    drupal_set_message($message);

    $query = drupal_query_string_encode($_GET, array('q'));
    $query .= (!empty($query) ? '&' : '') . 'destination=opendisc';
    drupal_goto('user/register', $query);
  }

  if ($_COOKIE['OPDSESSIONID']) {
    $rid = variable_get('opendisc_access_role', FALSE);

    // Check that an ID has been set.
    if (!$rid) {
      watchdog('opendisc', 'No access role has been set.');
      return variable_get('opendisc_error_no_access_role', t('No access role has been set, please contact the site administrator to configure the OpenDisc module.'));
    }

    // Add new role to their user account.
    $count = db_result(db_query("SELECT COUNT(uid) FROM {users_roles} WHERE uid = %d AND rid = %d", $user->uid, $rid));
    if ($count == 0) {
      db_query("INSERT INTO {users_roles} (uid, rid) VALUES (%d, %d)", $user->uid, $rid);
    }

    // Overwrite their profile content, if it exists.
    if (module_exists('profile')) {
      // This variable is just the fid to use for the first name
      if (($firstname_field = variable_get('opendisc_firstname_field', FALSE)) && !empty($_COOKIE['OPDUSERFIRSTNAME'])) {
        $exists = db_result(db_query("SELECT COUNT(uid) FROM {profile_values} WHERE fid = %d AND uid = %d", $firstname_field, $user->uid));
        if (!$exists) {
          db_query("INSERT INTO {profile_values} SET value = '%s', fid = %d, uid = %d", $_COOKIE['OPDUSERFIRSTNAME'], $firstname_field, $user->uid);
        }
      }

      if (($lastname_field = variable_get('opendisc_lastname_field', FALSE)) && !empty($_COOKIE['OPDUSERLASTNAME'])) {
        $exists = db_result(db_query("SELECT COUNT(uid) FROM {profile_values} WHERE fid = %d AND uid = %d", $lastname_field, $user->uid));
        if (!$exists) {
          db_query("INSERT INTO {profile_values} SET value = '%s', fid = %d, uid = %d", $_COOKIE['OPDUSERLASTNAME'], $lastname_field, $user->uid);
        }
      }
    }

    // Update email, if it's set in the admin.
    if ((variable_get('opendisc_overwrite_user_email', FALSE)) && !empty($_COOKIE['OPDUSEREMAIL'])) {
      db_query("UPDATE {users} SET mail = '%s' WHERE uid = %d", $_COOKIE['OPDUSEREMAIL'], $user->uid);
    }

    // Redirect them to exclusive content.
    drupal_goto(variable_get('opendisc_redirect_url', 'node'));
  }
  else {
    opendisc_error_log('!usernmame could not be added to opendisc role', array('!username' => theme('username', $user)));
    opendisc_error_log('<pre>'. htmlspecialchars(print_r($_COOKIE, 1)) .'</pre>');
    // No cookie has been set, return an error message.
    return variable_get('opendisc_error_not_authenticated', t("Your account has not been validated by by OpenDisc. Please re-insert your OpenDisc CD and try again."));
  }

  // Catch-all for any unhandled responses.
  return FALSE;
}

/**
 * Implementation of hook_form_alter().
 *
 * If a user is registering, and they have a valid OpenDisc session, redirect them to the OpenDisc landing page.
 */
function opendisc_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == "user_register") {
    // Check if a new user has the OpenDisc session data.
    require_once(drupal_get_path('module', 'opendisc') . '/opendisc/opendisc.inc.php');
    if ($_COOKIE['OPDSESSIONID']) {
      $form["#redirect"] = 'opendisc';

      // Pre-populate email field.
      if ($_COOKIE['OPDUSEREMAIL']) {
        $form['account']['mail']['#default_value'] = $_COOKIE['OPDUSEREMAIL'];
      }

      // Pre-populate first and last name fields, if set.
      if (module_exists('profile')) {
        if (($firstname_field = variable_get('opendisc_firstname_field', FALSE)) && !empty($_COOKIE['OPDUSERFIRSTNAME'])) {
          $firstname_data = db_fetch_object(db_query("SELECT name, category FROM {profile_fields} WHERE fid = %d", $firstname_field));
          $form[$firstname_data->category][$firstname_data->name]['#default_value'] = $_COOKIE['OPDUSERFIRSTNAME'];
        }

        if (($lastname_field = variable_get('opendisc_lastname_field', FALSE)) && !empty($_COOKIE['OPDUSERLASTNAME'])) {
          $lastname_data = db_fetch_object(db_query("SELECT name, category FROM {profile_fields} WHERE fid = %d", $lastname_field));
          $form[$lastname_data->category][$lastname_data->name]['#default_value'] = $_COOKIE['OPDUSERLASTNAME'];
        }
      }
    }
  }
}

/**
 * Implementation of hook_token_values().
 */
function opendisc_token_values($type, $object = NULL, $options = array()) {
  $values = array();
  switch ($type) {
    case 'opendisc':
      if (!isset($object)) {
        $object = $_COOKIE;
      }

      $values['opendisc-first-name'] = !empty($object['OPDUSERFIRSTNAME']) ? check_plain($object['OPDUSERFIRSTNAME']) : '';
      $values['opendisc-last-name'] = !empty($object['OPDUSERLASTNAME']) ? check_plain($object['OPDUSERLASTNAME']) : '';

      break;
  }
  return $values;
}

/**
 * Implementation of hook_token_list().
 */
function opendisc_token_list($type = 'all') {
  if ($type == 'opendisc') {
    $tokens['opendisc']['opendisc-first-name'] = t("User's first name, as sent from OpenDisc.");
    $tokens['opendisc']['opendisc-last-name'] = t("User's last name, as sent from OpenDisc.");
    return $tokens;
  }
}

function opendisc_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
      if (!empty($_COOKIE['OPDSESSIONID'])) {
        opendisc_pingback(!empty($edit['opendisc_privacy']));
      }
      break;
    case 'register':
      if (!empty($_COOKIE['OPDUSERCOUNTRY'])) {
        $href = 'http://www.sonymusic.com/hub/privacy/?t3='. $_COOKIE['OPDUSERCOUNTRY'];
        // US users don't need to agree to the privacy policy.
        if ($_COOKIE['OPDUSERCOUNTRY'] == 840) {
          $form['legal']['opendisc_privacy'] = array(
            '#type' => 'item',
            '#value' => t('Please review our <a href="!href">Privacy Policy</a>.', array('!href' => $href)),
            '#weight' => 99,
          );
        }
        else {
          $form['legal']['opendisc_privacy'] = array(
            '#type' => 'checkbox',
            '#title' => t('I agree to the <a href="!href">Privacy Policy</a>.', array('!href' => $href)),
            '#default_value' => 0,
            '#weight' => 99,
            '#required' => TRUE,
          );
        }
        return $form;
      }
  }
}

function opendisc_pingback($agree_value) {
  if (!class_exists('SoapClient')) {
    $hostname = '';
    exec('hostname', $hostname);
    $hostname = trim(implode('', $hostname));
    opendisc_error_log('Opendisc requires the SoapClient library. Host: @hostname.', array('@hostname' => $hostname));
    return;
  }

  // Check their OpenDisc credentials
  require_once(drupal_get_path('module', 'opendisc') . '/opendisc/opendisc.inc.php');

  try {
    $opd_key = GetURLQuery("k");
    $opd_user_id = GetURLQuery("u");
    $opd_media_id = GetURLQuery("m");
    $opd_session_id = GetURLQuery("s");

    if ($opd_user_id != "" && $opd_media_id != "" && $opd_session_id != "" && $opd_key != "") {
      $client = new SoapClient("http://remote.opendisc.net/Remote.asmx?wsdl");
      $parameters = array('u' => $opd_user_id, 'm' => $opd_media_id, 'k' => $opd_key, 's' => $opd_session_id, 'agree' => $agree_value);

      $response = $client->SetPrivacyPolicyAgreement($parameters);
      if (isset($response->SetPrivacyPolicyAgreementResult)) {
        opendisc_error_log('@result: <pre>@params</pre>', array(
          '@result' => $response->SetPrivacyPolicyAgreementResult, '@params' => print_r($parameters, 1)));
      }
      else {
        opendisc_error_log('Unexpected response <pre>@result</pre>', array('@result' => print_r($response, 1)));
        opendisc_error_log('Opendisc pingback params: <pre>@params<pre>', array('@params' => print_r($parameters, 1)));
      }
    }
  }
  catch (Exception $e) {
    opendisc_error_log('Uncaught exception during opendisc pingback. @error', array('@error' => print_r($e, 1)));
    // an unexpected error has occured
  }
}

function opendisc_error_log($message, $vars = array()) {
  watchdog('opendisc', $message, $vars);
  if (variable_get('opendisc_debug', FALSE)) {
    drupal_set_message(t($message, $vars));
  }
}
