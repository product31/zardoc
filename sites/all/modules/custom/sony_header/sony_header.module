<?php
// $Id$

/**
 * @file
 * Flash header integration magic....
 */

define('SONY_HEADER_IMAGE_FORMATS', 'jpg png gif');

/**
 * Implementation of hook_menu().
 */
function sony_header_menu() {
  $menu['sony_header/xml/%'] = array(
    'title' => 'Header XML',
    'page callback' => 'sony_header_xml',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );

  $menu['admin/build/sony_header'] = array(
    'title' => 'Flash Header',
    'description' => 'Manage flash headers',
    'file' => 'sony_header.admin.inc',
    'page callback' => 'sony_header_admin_list',
    'access arguments' => array('administer flash header'),
  );
  $menu['admin/build/sony_header/header'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $menu['admin/build/sony_header/new'] = array(
    'title' => 'New flash header',
    'description' => 'Make a new flash header',
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'file' => 'sony_header.admin.header.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sony_header_admin_header_edit', 'new'),
    'access arguments' => array('administer flash header'),
  );
  $menu['admin/build/sony_header/import'] = array(
    'title' => 'Import',
    'description' => 'Import a header from a file.',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'sony_header.admin.import.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sony_header_admin_header_import'),
    'access arguments' => array('import flash header'),
  );
    $menu['admin/build/sony_header/paste'] = array(
    'title' => 'Paste',
    'description' => 'Paste a header from the clipboard.',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'file' => 'sony_header.admin.paste.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sony_header_admin_header_paste'),
    'access arguments' => array('paste flash header'),
  );
    $menu['admin/build/sony_header/directory-check'] = array(
    'title' => 'List "File" Directory Images',
    'description' => 'List of all files in the Files directory for double checking',
    'weight' => 4,
    'type' => MENU_LOCAL_TASK,
    'file' => 'sony_header.admin.header.inc',
    'page callback' => 'sony_header_admin_header_list_files',
    'access arguments' => array('list directory files'),
  );

  // Header management.
  $menu['admin/build/sony_header/header/%'] = array(
    'title' => 'Manage Header',
    'description' => 'Manage flash header items.',
    // 'type' => MENU_LOCAL_TASK,
    'file' => 'sony_header.admin.header.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sony_header_admin_header_manage', 4),
    'access arguments' => array('administer flash header'),
  );
  $menu['admin/build/sony_header/header/%/manage'] = array(
    'title' => 'Manage',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
	 'access arguments' => array('administer flash header'),
  );
  $menu['admin/build/sony_header/header/%/preview'] = array(
    'title' => 'Preview',
    'description' => 'Preview a flash header xml.',
    'type' => MENU_LOCAL_TASK,
    'weight' => -1,
    'file' => 'sony_header.admin.item.inc',
    'page callback' => 'sony_header_item_preview',
    'page arguments' => array(4),
    'access arguments' => array('administer flash header'),
  );
  $menu['admin/build/sony_header/header/%/edit'] = array(
    'title' => 'Edit',
    'description' => 'Manage flash header items.',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'sony_header.admin.header.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sony_header_admin_header_edit', 4),
    'access arguments' => array('administer flash header'),
  );
  // TODO Hide delete as a callback?
  $menu['admin/build/sony_header/header/%/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete a flash header.',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'sony_header.admin.header.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sony_header_admin_header_delete', 4),
    'access arguments' => array('administer flash header'),
  );

  // Manage items.
  $menu['admin/build/sony_header/item/new'] = array(
    'title' => 'Add Item',
    'description' => 'Add a flash header item.',
    'type' => MENU_CALLBACK,
    'weight' => 1,
    'file' => 'sony_header.admin.item.inc',
    'page callback' => 'sony_header_admin_header_item_wizard',
    'page arguments' => array('new'),
    'access arguments' => array('add new item on manage page'),
  );
  $menu['admin/build/sony_header/item/%/edit'] = array(
    'title' => 'Edit Item',
    'description' => 'Edit an existing flash header item.',
    'type' => MENU_CALLBACK,
    'weight' => -1,
    'file' => 'sony_header.admin.item.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sony_header_admin_header_edit_item', 4),
    'access arguments' => array('administer flash header'),
  );
  $menu['admin/build/sony_header/item/%/delete'] = array(
    'title' => 'Delete Item',
    'description' => 'Delete an existing flash header item.',
    'type' => MENU_CALLBACK,
    'weight' => -1,
    'file' => 'sony_header.admin.item.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sony_header_admin_header_delete_item', 4),
    'access arguments' => array('administer flash header'),
  );

  return $menu;
}


/**
 * Create the flash node.
 */
function sony_header_flashnode() {
  $headers = sony_header_get_headers();
  foreach ($headers as $header) {
  }
}

/**
 * Implementation of hook_block().
 */
function sony_header_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      // A list of all blocks defined by the module.
      return sony_header_return_header_block_list();
    case 'configure':
      // Configuration form for the block.
      break;
    case 'save':
      // Save the configuration options.
      break;
    case 'view':
      $header_id = sony_header_return_headerid ($delta);
      $header = sony_header_load($header_id);
      $block['content']  = theme('sony_header_flash_embed', $header, FALSE);
      return $block;
  }
}

function sony_header_return_header_block_list() {
        $blocks[0] = array(
          'b_name' => t('flash_header'),
          'info' => 'Flash Header Front',
          'cache' => BLOCK_NO_CACHE,
          'visibility' => 1,
          'pages' => '<front>',
        );
        $blocks[1] = array(
          'b_name' => t('flash_header_inner'),
          'info' => 'Flash Header Inner',
          'cache' => BLOCK_NO_CACHE,
          'visibility' => 0,
          'pages' => '<front>',
        );
        $blocks[2] = array(
          'b_name' => t('flash_a'),
          'info' => 'Flash Block A',
          'cache' => BLOCK_NO_CACHE,
        );
        $blocks[3] = array(
          'b_name' => t('flash_b'),
          'info' => 'Flash Block B',
          'cache' => BLOCK_NO_CACHE,
        );
        $blocks[4] = array(
          'b_name' => t('flash_c'),
          'info' => 'Flash Block C',
          'cache' => BLOCK_NO_CACHE,
        );
        $blocks[5] = array(
          'b_name' => t('flash_d'),
          'info' => 'Flash Block D',
          'cache' => BLOCK_NO_CACHE,
        );
      return $blocks;
}
function sony_header_return_regions() {
  $registeredHeadersList =  sony_header_return_header_block_list();
  foreach ($registeredHeadersList as $registeredHeadersItem){
    $name = $registeredHeadersItem['b_name'];
    $header_regions[$name] = $registeredHeadersItem['info'];
  }
  return $header_regions;
}

function sony_header_id_check($headername){
   $registeredHeaders =  sony_header_return_regions();
     foreach ($registeredHeaders as $key=>$value){
         if($headername == $key){
            return true;
            }
             else {
                return false;
                }
      }
}

function sony_header_return_region_name($headername, $registeredHeaders){
   $registeredHeaders =  sony_header_return_regions();
     foreach ($registeredHeaders as $key=>$value){
         if($headername == $key){
            return $value;
            }
      }
}

function sony_header_return_current_block_name($current_block_delta){
   $registeredHeaders = sony_header_return_header_block_list();
   return $registeredHeaders[$current_block_delta]['b_name'];
   
      
}

function sony_header_return_headerid ($current_block_delta){
      global $language;
      $default_lang = variable_get('language_default', '');
      $current_block_name = sony_header_return_current_block_name($current_block_delta);
      $headers = sony_header_get_headers();          
      foreach ($headers as $header) {
        if($header->language == $language->language ){ 
         if($header->name == $current_block_name){
              $flash_id = $header->header_id;
              }    
         }
        elseif ($header->language == $default_lang->language){
          if($header->name == $current_block_name){
              $flash_id = $header->header_id;
              }            
          }        
        }
   return $flash_id ;
}

/**
 * Implementation of hook_elements().
 */
function sony_header_elements() {
  return array(
    'sony_header_flexi_file' => array(
      '#input' => TRUE,
      '#process' => array('expand_sony_header_flexi_file'),
      '#default_value' => '',
      '#source' => 'file',
      '#file_type' => 'image',
      '#file_types' => SONY_HEADER_IMAGE_FORMATS,
      // '#element_validate' => array('my_element_validate'),
    ),
  );
}

/**
 * Implementation of hook_perm().
 */

function sony_header_perm() {
  return array('administer flash header','add new item on manage page', 'import flash header', 'paste flash header', 'list directory files' );
}


/**
 * Expand the flexifile element into its component elements.
 *
 * @param $element
 * Unexpanded form element.
 * @return
 * Expanded form element.
 */
function expand_sony_header_flexi_file($element) {

  // We need to have things as a tree so we can handle pulling information out correctly.
  $element['#tree'] = TRUE;
  _sony_header_include('file');
  $default = sony_header_flexi_file_load($element['#default_value']);

  // Upload related fields.
  $element['manual'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manual'),
    '#collapsible' => TRUE,
    '#collapsed' => !empty($default['file']),
  );
  $element['manual']['path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path'),
    '#weight' => 1,
    '#description' => t('Provide the full path or url of a file.'),
    '#default_value' => '', // Not sure how to handle this yet.
  );

  $delete = array('#type' => 'value', '#value' => FALSE);
  if (!$element['#required']) {
    $delete = array(
      '#title' => 'Delete',
      '#type' => 'checkbox',
    );
  }
  // Upload related fields.
  // TODO - This would really rock with some image cache presets.
  $element['upload'] = array(
    '#title' => t('Upload'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => empty($default['file']) && $default['path'],
  );
  $element['upload']['file'] = array(
    '#type' => 'file',
    '#title' => t('Upload'),
    // form.inc does this but doing it like this seems to avoid it so...
    '#name' => 'files[' . $element['#source'] . "]",
    '#description' => t('Choose a file to upload. Valid extensions: %extensions', array('%extensions' => $element['#file_types'])),
  );

  // Switch to handle images a bit differently.
  $src = sony_header_flexi_file_render($default);
  if ($element['#file_type'] == 'image') {
    if (!empty($default['file'])) {
      $element['upload']['preview'] = array(
        '#type' => 'item',
        '#title' => t('Preview'),
        '#value' => '<img src="' . $src .'" />',
      );
      $element['upload']['delete'] = $delete;
    }
    elseif ($default) {
      $element['manual']['preview'] = array(
        '#type' => 'item',
        '#title' => t('Preview'),
        '#value' => '<img src="' . $src .'" />',
      );
      $element['manual']['path']['#default_value'] = $src;
    }
  }
  else {
    if (!empty($default['file'])) {
      $element['upload']['preview'] = array(
        '#type' => 'item',
        '#title' => t('Preview'),
        '#value' => $src,
      );
      $element['upload']['delete'] = $delete;
    }
    elseif ($default) {
      $element['manual']['preview'] = array(
        '#type' => 'item',
        '#title' => t('Preview'),
        '#value' => $src,
      );
      $element['manual']['path']['#default_value'] = $src;
    }
  }

  return $element;
}

/**
 * #value_callback function for sony_header_flexi_file elements.
 */
function form_type_sony_header_flexi_file_value($form, $edit = FALSE) {
  if ($edit === FALSE) {
    return array();
  }
}

/**
 * Template preprocess function for theme('sony_header_flash_embed');
 */
function template_preprocess_sony_header_flash_embed(&$variables) {
  $header = $variables['header'];
 
  $params = array(
    'wmode' => empty($header->params['transparent']) ? 'opaque' : 'transparent',
    'bgcolor' => isset($header->params['bgcolor']) ? $header->params['bgcolor'] : '#000000',
    'menu' => 'true',
    'scale' => 'noscale',
    'salign' => 'tl', // after testing, this must come AFTER the scale param
    'devicefont' => 'true',
    'allowscriptaccess' => 'always',
    'allownetworking' => 'all',
    'version' => '9.0.45',
  );
  $query = $variables['preview'] ? array('preview' => 1) : '';
  $flashvars = array(
    'global' => 'true', // Always true?
    'country' => 'us', // TODO how do we populate this?
    'xmlSrc' => url('sony_header/xml/' . $header->header_id, array('query' => $query)),
  );
  $attributes = array(
    'id' => $header->name,
  );

  drupal_add_js(drupal_get_path('module', 'sony_header') .'/deploy/js/swfobject.js');
  $variables['flashvars'] = drupal_to_js($flashvars);
  $variables['params'] = drupal_to_js($params);
  $variables['attributes'] = drupal_to_js($attributes);

  $variables['width'] = isset($header->params['width']) ? $header->params['width'] : '100%';
  $variables['height'] = isset($header->params['height']) ? $header->params['height'] : '100%';

  $variables['swf'] = base_path() . drupal_get_path('module', 'sony_header') . '/flashheader.swf';
  $variables['expressinstall'] = base_path() . drupal_get_path('module', 'sony_header') . '/deploy/swfs/expressInstall.swf';
  $variables['content_id'] = $attributes['id'] .'_content';
  $variables['alternate_content'] = filter_xss_admin($header->alternate_content);
}

/**
 * Implementation of hook_ctools_plugin_type().
 */
function sony_header_ctools_plugin_type() {
  return array(
    'cache' => FALSE,
    'defaults' => array(
      'content' => TRUE,
      'container' => FALSE,
      'system' => FALSE,
      'render' => 'sony_header_default_render',
      'settings form' => 'sony_header_default_settings_form',
      'settings form validate' => 'sony_header_default_settings_form_validate',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function sony_header_ctools_plugin_directory($module, $plugin) {
  if ($module == 'sony_header' && $plugin == 'type') {
    return 'plugins/type';
  }
}

/**
 * Implementation of hook_theme().
 */
function sony_header_theme() {
  return array(
    'sony_header_flash_embed' => array(
      'template' => 'sony-header-block',
      'arguments' => array(
        'header' => NULL,
        'preview' => FALSE,
      ),
    ),
    'sony_header_item_name' => array(
      'path' => drupal_get_path('module', 'sony_header'),
      'file' => 'sony_header.theme.inc',
      'arguments' => array(
        'item' => array(), // Really its a stdClass but not sure that's possible here.
      ),
    ),
    'sony_header_operations' => array(
      'path' => drupal_get_path('module', 'sony_header'),
      'file' => 'sony_header.theme.inc',
      'arguments' => array(
        'items' => array(),
      ),
    ),
    'sony_header_admin_header_manage' => array(
      'path' => drupal_get_path('module', 'sony_header'),
      'file' => 'sony_header.theme.inc',
      'arguments' => array(
        'form' => array(),
      ),
    ),
    'sony_header_flexi_file' => array(
      'path' => drupal_get_path('module', 'sony_header'),
      'file' => 'sony_header.theme.inc',
      'arguments' => array(
        'element' => array(),
      ),
    ),
  );
}

/**
 * Page callback for rendering xml.
 */
function sony_header_xml($header_id) {

  drupal_set_header('Content-Type: text/xml');
  _sony_header_include('render');
  print sony_header_render_xml($header_id, !empty($_GET['preview']));
}

/**
 * Get a list of headers.
 *
 * @return
 * An array of header info(no items)
 */
function sony_header_get_headers() {

  $results = db_query('SELECT header_id, name, title, language, config_css, config_font FROM {sony_header}');
  $headers = array();

  while ($header = db_fetch_object($results)) {
    $headers[] = $header;
  }

  return $headers;
}

/**
 * Load a flash header.
 *
 * @param <type> $id
 * The id of the flash header.
 * @return
 * A loaded flash header array.
 */
function sony_header_load($id) {

  $header = db_fetch_object(db_query('SELECT
    header_id, name, title, language, params, config_css, config_font, embed_fonts, check_policy, alternate_content
    FROM {sony_header} WHERE header_id = %d', $id));

  $header->params = unserialize($header->params);
  $header->config_css = unserialize($header->config_css);
  $header->config_font = unserialize($header->config_font);

  if ($header) {
    $header->items = _sony_header_header_load_items($id);

    return $header;
  }
  return false;
}

/**
 * Load individual header items.
 *
 * @param $header_id
 * The id of a header to load items for.
 * @param $pid
 * Optional parent of the item. Mostly used internally.
 */
function _sony_header_header_load_items($header_id, $pid = 0) {

  $items = array();
  $results = db_query('SELECT
    tag_id, header_id, type, id, content, attributes, weight, parent_id, publish_item
    FROM {sony_header_item} WHERE header_id = %d AND parent_id = %d', $header_id, $pid);

  while ($item = db_fetch_object($results)) {

    $item->attributes = unserialize($item->attributes);
    if (!is_array($item->attributes)) {
      $item->attributes = array($item->attributes);
    }

    $items[$item->tag_id] = $item;

    $sub_items = _sony_header_header_load_items($header_id, $item->tag_id);
    if (!empty($sub_items)) {
      $items[$item->tag_id]->items = $sub_items;
    }
  }

  return $items;
}

/**
 * Save a flash header.
 *
 * @param $header
 * A header object.
 * @return
 * Saved status.
 */
function sony_header_save($header) {

  $update = array();
  if (isset($header->header_id)) {
    $update = array('header_id');
  }

  $header->params = serialize($header->params);
  $header->config_css = serialize($header->config_css);
  $header->config_font = serialize($header->config_font);

  $return = drupal_write_record('sony_header', $header, $update);

  if (!empty($header->items)) {
    sony_header_items_save($header->items, $header->header_id);
  }
  
  return $return;
}

/**
 * Delete a flash header.
 *
 * @param $header_id
 * Id of header to delete.
 */
function sony_header_delete($header_id) {
  db_query('DELETE FROM {sony_header_item} WHERE header_id = %d', $header_id);
  db_query('DELETE FROM {sony_header} WHERE header_id = %d', $header_id);
}

/**
 * Get a list of available element types.
 */
function sony_header_get_types() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('sony_header', 'type');
  foreach ($plugins as $key => $plugin) {
    if ($plugin['system']) {
      unset($plugins[$key]);
    }
  }
  return array_keys($plugins);
}

/**
 * Load an individual header item.
 *
 * @param $id
 * Id of item of item to load.
 */
function sony_header_item_load($id) {

  $item = db_fetch_object(db_query('SELECT
    tag_id, header_id, type, id, content, attributes, weight, parent_id, publish_item
    FROM {sony_header_item} WHERE tag_id = %d', $id));

  $item->attributes = unserialize($item->attributes);
  return $item;
}

/**
 * Save an item.
 *
 * @param $item
 * Item object.
 * @return
 * Save status
 */
function sony_header_item_save($item) {
  $update = array();
  if (isset($item->tag_id) && is_numeric($item->tag_id)) {
    $update = array('tag_id');
  }
  return drupal_write_record('sony_header_item', $item, $update);
}

/**
 * Save a list of items.
 *
 * @param $items
 * A list of header item objects.
 */
function sony_header_items_save($items, $header_id = 0, $parent_id = 0) {
  foreach ($items as $item) {
    // Make sure we have some required fields.
    if (!isset($item->header_id)) {
      $item->header_id = $header_id;
    }
    if (!isset($item->parent_id)) {
      $item->parent_id = $parent_id;
    }

    sony_header_item_save($item);

    if (!empty($item->items)) {
      sony_header_items_save($item->items, $header_id, $item->tag_id);
    }
  }
}

/**
 * Delete an item.
 *
 * @param $item_id
 * Item id.
 * @return
 * None.
 */
function sony_header_item_delete($item) {
  // Recursively delete items so we don't leave dead items laying around.
  $results = db_query('SELECT tag_id FROM {sony_header_item} WHERE parent_id = %d', $item->tag_id);
  while ($child_id = db_fetch_array($results)) {
    $child = sony_header_item_load($child_item['tag_id']);
    sony_header_item_delete($child);
  }

  ctools_include('plugins');
  $plugin = ctools_get_plugins('sony_header', 'type', $item->type);
  $func = ctools_plugin_get_function($plugin, 'delete');
  if ($func) {
    $func($item);
  }

  // Delete item from the db.
  db_query('DELETE FROM {sony_header_item} WHERE tag_id = %d', $item->tag_id);
}

/**
 * Include helper code include files.
 *
 * @param $name
 * @return bool
 * Load success or failure.
 */
function _sony_header_include($name) {
  static $include = array();
  if (!isset($include[$name])) {
    $file = 'includes/' . $name;
    if (module_load_include('inc', 'sony_header', $file) !== FALSE) {
      $include[$name] = TRUE;
    }
    else {
      $include[$name] = FALSE;
    }
  }
  return $include[$name];
}

/**
 * Import a header structure from an XML file.
 */
function sony_header_import($file, $name = '', $title = '', $language = '') {
  $path = preg_replace(
    array(
      // We don't want the relative path identifier. It'll just confuse things a bit.
      '/^\.\//',
      // And if we trim of the .xml we'll have the path to the extra assets.
      '/\.xml$/',
    ),
    // Just strip out both items.
    array('', ''),
	
    $file->filename);
    $file = $file->filename;

  if (is_file($file)) {
    $asset_path = base_path() . $path . "/assets";
    $image_path = base_path() . $path . "/images";
    $swf_path = base_path() . $path . "/swfs";

    $content = file_get_contents($file);
    $content = str_replace(
      array('{images}', '{assets}', '{swfs}'),
      array($image_path, $asset_path, $swf_path),
      $content);
    $xml = simplexml_load_string($content);

    // Make sure we cleanup content because it could take up a lot of memory and the next steps might need it.
    unset($content);
  }

  if (!isset($xml)) {
    return FALSE;
  }

  sony_header_include('import', 'sony_header');
  return _sony_header_header_import($name, $title, $language, $xml);
}

/**
 * Import a header structure from a pasted XML file.
 */
function sony_header_paste($xmlcontent, $name = '', $title = '', $language = '') {
	
	$xml = simplexml_load_string($xmlcontent);


  if (!isset($xml)) {
    return FALSE;
  }

  sony_header_include('import', 'sony_header');
  return _sony_header_header_import($name, $title, $language, $xml);
}

/**
 * Validate that z is incrementally added to header list.
 *
 * TODO - It is possible to increase the item if editing the item with a max z.
 */
function _sony_header_validate_z($items, $z) {
  $zs = array();

  _sony_header_validate_z_map($items, $z, $zs);
  sort($zs);

  $previous = $zs[0] - 1;
  $unset = FALSE;

  foreach ($zs as $k => $i) {
    if ($unset || ($previous != $i - 1)) {
      $unset = TRUE;
      unset($zs[$k]);
    }
    else {
      $previous = $i;
    }
  }

  if (isset($zs[$z]) || isset($zs[$z - 1])) {
    return FALSE;
  }

  return max($zs);
}

/**
 * Recusive helper to build the map of Z values.
 */
function _sony_header_validate_z_map($items, $z, &$zs) {
  foreach ($items as $item) {
    if (!empty($item->items)) {
      _sony_header_validate_z_map($item->items, $z, $zs);
    }
    if (isset($item->attributes['z']) && !array_search($item->attributes['z'], $zs)) {
      $zs[] = $item->attributes['z'];
    }
  }
}

/**
 * Stolen version of new ctools include to use until our ctools reaches 1.3.1.
 */
function sony_header_include($file, $module = 'ctools', $dir = 'includes') {
  if (module_invoke('ctools', 'api_version', '1.3.1')) {
    watchdog('sony_header', 'C-Tools placeholder function can be removed.', array());
    ctools_include($file, $module, $dir);
  }
  else {
    static $used = array();
    if (!isset($used[$module][$dir][$file])) {
      require_once './' . drupal_get_path('module', $module) . "/$dir/$file.inc";
    }

    $used[$file] = TRUE;
  }
}
function sony_header_build_breadcrumb_for_header ($header = null){
	$breadcrumb = array();
  $breadcrumb[0] = l(t('Home'), '<front>');
  $breadcrumb[1] = l(t('Administer'), 'admin');
	$breadcrumb[2] = l(t('Site building'), 'admin/build');
	$breadcrumb[3] = l(t('All Flash Headers'), 'admin/build/sony_header');
	$breadcrumb[4] = ($header->title) ? $header->title : '';
	
    // Set Breadcrumbs
    //drupal_set_breadcrumb($breadcrumb);
	  if ($header->name){
	   drupal_set_title(t('You are editing:  '). '"'.$header->title.'" ( '.$header->language.'  )');
	   $output = t('You are here:  '). $breadcrumb[0].' > '.$breadcrumb[1].' > '.$breadcrumb[2].' > '.$breadcrumb[3].' > '.$breadcrumb[4];
       }else{
       $output = $breadcrumb[0].' > '.$breadcrumb[1].' > '.$breadcrumb[2].' > '.$breadcrumb[3];
       }
  return $output;
}

function sony_header_build_markup ($title, $content){
  $output = '<strong>'.t($title).'</strong> :  '.$content.'<br/>';
  return $output;
}

function sony_header_return_image_array(&$item){
   if($item->attributes['src']['path']){
      if($item->attributes['src']['path'] === '/'){ 
      $imageArray[0]= sony_header_build_markup ('Image Path', '<br/><img src="'.$item->attributes['src'].'"/>');
	    $imageArray[1]= sony_header_build_markup ('Image SRC', $item->attributes['src']);
      }else{
      $baseurl = (sony_header_has_relative_slash($item->attributes['src']['path'])) ? '' : base_path(); 
      $imageArray[0]= sony_header_build_markup ('Image Path', '<br/><img src="'.$baseurl.$item->attributes['src']['path'].'"/>');
	    $imageArray[1]= sony_header_build_markup ('Image SRC', $baseurl.$item->attributes['src']['path']);
      }
  }elseif($item->attributes['src']['file']){
      $imageObject = sony_header_load_file($item->attributes['src']);
      $imageArray[0]= sony_header_build_markup ('Image Path', '<br/><img src="'.base_path().$imageObject->filepath.'"/>');
      $imageArray[1]= sony_header_build_markup ('Image SRC', $imageObject->filepath); 
	 }else{
	   $imageArray[0]= sony_header_build_markup ('Image Path', '<br/><img src="'.base_path().$item->attributes['src'].'"/>');
	   $imageArray[1]= sony_header_build_markup ('Image SRC', $item->attributes['src']);    
	    
  }
  
return $imageArray;
}

function sony_header_has_relative_slash($url){
// checks to see if an intital "/" is added to the image path
 $urlarray = str_split($url);
   if ($urlarray[0] == '/'){
    return true;
   }else{
   return false;
   }
}