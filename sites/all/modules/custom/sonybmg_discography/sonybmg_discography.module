<?php
// $Id$
/**
 * @file
 * Implements an artist discography. Disabling this module will hide the
 * Discography section. Uninstall to remove entirely.
 */

/**
 * Implementation of hook_menu().
 */
function sonybmg_discography_menu() {
  $items = array();
  $items['music'] = array(
    'title' => 'Music',
    'page callback' => 'sonybmg_discography_current',
    'access arguments' => array('access content'),
    'menu_name' => 'primary-links',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['admin/sony/lyrics_admin'] = array(
    'title' => 'Administer lyrics',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sonybmg_discography_lyrics_admin'),
    'access arguments' => array('administer nodes'),
  );
  return $items;
}

/**
 * Menu callback for /music
 * Redirect to the latest music node, taking language into consideration.
 */
function sonybmg_discography_current() {
  module_load_include('inc', 'sonybmg_discography', 'crud.inc');
  $nid = sonybmg_discography_get_latest_album();

  drupal_goto('node/'. $nid, NULL, NULL, 301);
}

/**
 * Implementation of hook_init().
 */
function sonybmg_discography_init() {
  module_load_include('inc', 'sonybmg_discography', 'sonybmg_discography.crud');
}

/**
 * Implementation of hook_views_api().
 */
function sonybmg_discography_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'sonybmg_discography'),
  );
}

/**
 * Implementation of hook_nodeapi().
 *
 * On album updates, check if we need to set a new alias for the 'music'
 * page. The latest album should always be the main music page.
 */
function sonybmg_discography_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (($node->type == 'album') || ($node->type == 'track')) {
    switch ($op) {
      case 'view' :
        //if this is not a teaser, then append the track listing to the node
        if ($node->type === 'album' && empty($a3)) {
          $node->content['tracks'] = array(
            '#title' => t('Track Listing'),
            '#value' => views_embed_view('music_tracks', 'default', $node->nid),
            '#weight' => 10,
          );
        }

        if (!empty($a4)) {
          drupal_set_breadcrumb(sonybmg_discography_get_breadcrumb($node));          
          sonybmg_discography_set_active_trail($node);
        }
        break;
    }
  }
}

/**
 * Set the active trail for an album or track node page.
 */
function sonybmg_discography_set_active_trail($node) {
  switch ($node->type) {
    case 'album':
    case 'track':
      menu_set_active_menu_name('primary-links');
      $item = menu_get_item();
      $item['href'] = 'music';
      menu_set_item(NULL, $item);
      break;
  }
}

/**
 * Determine the appropriate breadcrumb for an album or track node.
 */
function sonybmg_discography_get_breadcrumb($node) {
  $breadcrumb = array();
  switch ($node->type) {
    case 'album':
      $breadcrumb[] = l(t('Home'), NULL);
      $breadcrumb[] = l(t('Music'), 'music');
      break;
    case 'track':
      $album = node_load($node->field_album[0]['nid']);    
      $breadcrumb = sonybmg_discography_get_breadcrumb($album);
      $breadcrumb[] = l($album->title, 'node/'. $album->nid);
      break;            
  }
  // dsm($breadcrumb);
  return $breadcrumb;  
}

/**
 * Implementation of hook_block().
 */
function sonybmg_discography_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;

  //if on a user page, base account information on that
  if (arg(0) == 'user' && is_numeric(arg(1))) {
    $account = user_load(array('uid' => arg(1)));
  }
  else {
    $account = $user;
  }

  //switch on the operation being performed
  switch ($op) {
    case 'list' :
        $blocks[0]['info'] = t("Album Buy It");
        $blocks[1]['info'] = t("Album Cover");
        $blocks[2]['info'] = t("Album Discography");
        $blocks[3]['info'] = t("Album Sitewide Buy It - Top");
        $blocks[4]['info'] = t("Album Sitewide Buy It - Bottom");
        return $blocks;
      break;
    case 'configure' :
        //if configuring 'Album Sitewide Buy It'
        if ($delta == 3 || $delta == 4) {
          $form['sonybmg_discography_featured_album'] = array(
            '#type' => 'select',
            '#title' => t('Display Album'),
            '#default_value' => variable_get('sonybmg_discography_featured_album', 'latest'),
            '#options' => array('latest' => t('Latest album by release date (default)')),
            '#desscription' => t('The selected album will be displayed in this block, usually in page header and footer.'),
          );
          $nids = sonybmg_discography_get_albums();
          if (!$nids) {
            drupal_set_message(t('No albums have been created for this language, or with no language.'), 'error');
            return $form;
          }
          $result = db_query('SELECT nid, title FROM {node} WHERE nid IN ('. db_placeholders($nids, 'int') .')', $nids);
          while ($row = db_fetch_object($result)) {
            $form['sonybmg_discography_featured_album']['#options'][$row->nid] = $row->title;
          }
          return $form;
        }
      break;
    case 'save' :
      if ($delta == 3 || $delta == 4) {
        variable_set('sonybmg_discography_featured_album', $edit['sonybmg_discography_featured_album']);
      }
      break;
    case 'view' :
      $block = array();
      //if can access content
      if (user_access('access content')) {
        //switch on delta
        switch ($delta) {
          //Album Buy It
          case 0:
              $_album = FALSE;
              if ($node = menu_get_object('node', 1)) {
                if ($node->type == 'album') {
                  $nid = $node->nid;
                }
                $_album = $node;
                $block['subject'] = '';
                $block['content'] = theme('sonybmg_discography_buy_it', $_album);
              }
              /*
              if (!isset($nid)) {
                $nid = sonybmg_discography_get_latest_album();
              }
              if (isset($nid)) {
                $_album = node_load($nid);
              }
              //if we found an album to show
              if ($_album) {
                $block['subject'] = t('Buy It');
                $block['content'] = theme('sonybmg_discography_buy_it', $_album);
              }
              */
            break;
          //Album Cover
          case 1:
              $nid = sonybmg_discography_get_related_album();
              $node = node_load($nid);
              if ($node->type == 'album' || $node->type == 'track') {
                $block['content'] = theme('sonybmg_discography_album_cover', $node);
              }
            break;
          //Album Discography
          case 2:
              $nids = sonybmg_discography_get_albums();
              $block['title'] = t('Discography');
              $block['content'] = theme('sonybmg_discography_albums', $nids);
            break;
          //Album Sitewide Buy It
          case 3:
          case 4:
              $nid = variable_get('sonybmg_discography_featured_album', 'latest');
              if ($nid == 'latest') {
                $nid = sonybmg_discography_get_latest_album();
              }
              if (module_exists('country_code')) {
                $nid = country_code_get_country_node_id($nid);
              }

              if ($nid) {
                $node = node_load($nid);
                $block['subject'] = '';
                $block['content'] = theme('sonybmg_discography_buy_it', $node);
              }
            break;
        }
        return $block;
      }
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function sonybmg_discography_theme($existing, $type, $theme, $path) {
  /*
    'views_view_list_music_albums' => array(
      'file'      => 'sonybmg_discography.theme.inc',
      'arguments' => array('view' => NULL,
                           'nodes' => NULL,
                           'type' => NULL),
    ),
    'views_view_list_music_tracks' => array(
      'file'      => 'sonybmg_discography.theme.inc',
      'arguments' => array('view' => NULL,
                           'nodes' => NULL,
                           'type' => NULL),
    ),
  */

  return array(
    'sonybmg_discography_buy_it' => array(
      'file'      => 'sonybmg_discography.theme.inc',
      'arguments' => array('node' => NULL),
    ),
    'sonybmg_discography_album_cover' => array(
      'file'      => 'sonybmg_discography.theme.inc',
      'arguments' => array('node' => NULL),
    ),
    'sonybmg_discography_album_cover' => array(
      'file'      => 'sonybmg_discography.theme.inc',
      'arguments' => array('node' => NULL),
    ),
    'sonybmg_discography_albums' => array(
      'file'      => 'sonybmg_discography.theme.inc',
      'arguments' => array('album_nids' => NULL),
    ),
//    'views_view_fields__music_tracks' => array(
//      'file'      => 'sonybmg_discography.theme.inc',
//      'template'  => 'views-view-fields--music-tracks',
//      'original hook' => 'views-view-fields',
//      'arguments' => array('view' => NULL),
//    ),
  );
}

/**
 * Form to display the rating widget used for rating tracks.
 *
 * @param $album_nid
 *   The nid of the parent album for this track.
 * @param $track_nid
 *   The nid of the track being rated.
 * @param $uid
 *   The user ID whose rating will prepopulate the widget star values.
 */
function sonybmg_discography_track_rating_form($form_state, $album_nid, $track_nid, $uid) {
  static $user_ratings;

  if (!isset($user_ratings[$uid][$album_nid])) {
    if ($uid > 0) {
      // Have views build our query because we can't count on the cck schema being consistent between sites.
      $view = views_get_view('discography_track_ratings');
      $view->set_arguments(array($album_nid));
      $view->set_display('default');
      $view->display_handler->pre_execute();
      $view->build();
      $view->execute();

      $args = array();
      foreach ($view->result as $row) {
        $args[] = $row->nid;
      }
      // And since views can't return 
      $placeholders = implode(', ', array_fill(0, count($args), '%d'));
      $query = "SELECT votingapi_vote_node_percent_vote.content_id AS nid, votingapi_vote_node_percent_vote.value AS votingapi_vote_node_percent_vote_value
        FROM votingapi_vote votingapi_vote_node_percent_vote
        WHERE (votingapi_vote_node_percent_vote.content_type = 'node' AND votingapi_vote_node_percent_vote.value_type = 'percent' AND votingapi_vote_node_percent_vote.tag = 'vote') AND
          votingapi_vote_node_percent_vote.content_id IN (" . $placeholders . ") AND
          votingapi_vote_node_percent_vote.uid = %d";
      
      $args[] = $uid;
      $results = db_query($query, $args);
      while ($row = db_fetch_object($results)) {
        $votes[$row->nid] = $row->votingapi_vote_node_percent_vote_value;
      }
      foreach ($view->result as $row) {
        $user_ratings[$uid][$album_nid][$row->nid] = isset($votes[$row->nid]) ? $votes[$row->nid] : 0;
      }
    }

    if (!isset($user_ratings[$uid][$album_nid][$track_nid])) {
      $user_ratings[$uid][$album_nid][$track_nid] = 0;
    }
  }

  $values = array('user' => $user_ratings[$uid][$album_nid][$track_nid]);
  $settings = array(
    'stars' => variable_get('fivestar_stars_track', 5),
    'allow_clear' => FALSE,
    'style' => 'user',
    'text' => 'none',
    'content_type' => 'node',
    'content_id' => $track_nid,
    'autosubmit' => TRUE,
    'title' => FALSE,
    'feedback_enable' => FALSE,
    'labels_enable' => FALSE,
    'tag' => 'vote',
    'labels' => array(),
  );

  return fivestar_custom_widget($form_state, $values, $settings);
}

/**
 * REWRITE of this function to make it more flexible
 * since admins are entering their own urls now
 * Match a URL with a Music Service
 *
 * @param $url
 *   The music service url
 * @return
 *   A string containing the human readable name of the store
 */
function sonybmg_discography_musiclookup_match_link($url) {
  if (strpos($url, 'www.amazon.com')) {
    return 'Amazon.com';
  }
  if (strpos($url, 'www.sonymusicstore.com')) {
    return 'MyPlay Store';
  }
  if (strpos($url, 'www.sonybmgstore.com')) {
    return 'MyPlay Store';
  }
  if (strpos($url, 'shop.myplay.com')) {
    return 'MyPlay Store';
  }
  if (strpos($url, 'www.walmart.com')) {
    return 'Wal-Mart';
  }
  if (strpos($url, 'www.target.com')) {
    return 'Target';
  }
  if (strpos($url, 'www.rhapsody.com/')) {
    return 'Rhapsody';
  }
  if (strpos($url, 'click.linksynergy')) {
    return 'iTunes';
  }
  else {
    return '';
  }
}

/**
 * Implementation of hook_form_alter().
 */
//function sonybmg_photo_gallery_form_photo_node_form_alter(&$form, &$form_state) {
function sonybmg_discography_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'track_node_form') {
    // if album_nid is passed in query string, set the album value and hide it
    if (isset($_GET['album_nid']) && ($album = node_load($_GET['album_nid'])) && $album->type == 'album') {
      $form['field_album']['#default_value'][0]['nid'] = $album->nid;
      $form['field_album']['#attributes']['disabled'] = 'disabled';
      $form['field_album']['#prefix'] = '<div style="display: none;">';
      $form['field_album']['#suffix'] = '</div>';

      $form['_field_album'] = array(
        '#type' => 'item',
        '#title' => $form['field_album']['#title'],
        '#weight' => $form['field_album']['#weight'],
        '#value' => $album->title,
      );
    }
  }

}

/**
 * Implementation of hook_link().
 */
function sonybmg_discography_link($type, $object, $teaser = FALSE) {
  $links = array();

  if ($type == 'node' && $object->type == 'album' && !$teaser && node_access('create', 'track')) {
    $links['add_track'] = array(
      'title' => t('Add new track'),
      'href' => 'node/add/track',
      'query' => drupal_get_destination() .'&album_nid='. $object->nid,
    );
  }

  return $links;
}

/**
 * Implementation of hook_default_flags().
 */
function sonybmg_discography_flag_default_flags() {
  $flags = array();

  $flags[] = array(
    'content_type'   => 'node',
    'name'           => 'favorites',
    'title'          => 'Favorites',
    'global'         => FALSE,
    'flag_short'     => 'Add to Favorites',
    'flag_long'      => 'Add this item to My Favorites',
    'flag_message'   => '',
    'unflag_short'   => 'Remove from Favorites',
    'unflag_long'    => 'Remove this item from My Favorites',
    'unflag_message' => '',
    'roles'          => array(2),
    'types'          => array('album', 'track'),
    'global'         => 0,
    'show_on_teaser' => TRUE,
    'show_on_page'   => FALSE,
    'show_on_form'   => FALSE,
    'status'         => TRUE,
    // Locked properties are not changeable by the Flag UI.
    'locked'         => array(
      'name',
      'global',
    ),
  );

  return $flags;

  // will not run.  just needed so that flag defaults get into po files.
  t('Favorites');
  t('Add to Favorites');
  t('Add this item to My Favorites');
  t('Remove from Favorites');
  t('Remove this item from My Favorites');
}

function sonybmg_discography_lyrics_admin() {
  module_load_include('inc', 'content', 'includes/content.node_form');
  $form = array();
  $type = content_types('track');
  $field = $type['fields']['field_gracenote_lyrics'];

  $form['nodes'] = array(
    '#tree' => TRUE,
  );

  $languages = language_list();

  $result = db_query('SELECT n.nid FROM {node} n WHERE n.type = "track" AND (n.language = "" OR n.language = "en")');
  while ($row = db_fetch_array($result)) {
    $node = node_load($row['nid']);
    $album_nid = $node->field_album[0]['nid'];
    $album = node_load($album_nid);
    if ($album->language == '' || $album->language == 'en') {
      $form['nodes'][$album_nid][$node->nid]['#node'] = $node;
      $form['nodes'][$album_nid][$node->nid] += content_field_form($form['nodes'][$album_nid][$node->nid], $form_state, $field);
      $form['nodes'][$album_nid][$node->nid]['field_gracenote_lyrics'][0]['#title'] = $node->title;
      if ($node->language && $languages[$node->language]) {
        $form['nodes'][$album_nid][$node->nid]['field_gracenote_lyrics'][0]['#title'] .= ' ('. $languages[$node->language]->name.')';
      }
      else {
        $form['nodes'][$album_nid][$node->nid]['field_gracenote_lyrics'][0]['#title'] .= ' (Language neutral)';
      }
    }
  }

  foreach (element_children($form['nodes']) as $album_nid) {
    $album = node_load($album_nid);
    $form['nodes'][$album_nid]['#type'] = 'fieldset';
    $form['nodes'][$album_nid]['#title'] = $album->title;
    if ($album->language && $languages[$album->language]) {
      $form['nodes'][$album_nid]['#title'] .= ' ('. $languages[$album->language]->name.')';
    }
    else {
      $form['nodes'][$album_nid]['#title'] .= ' (Language neutral)';
    }
  }

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save changes'),
  );
  return $form;
}

function sonybmg_discography_lyrics_admin_submit($form, &$form_state) {
  module_load_include('inc', 'node', 'node.pages');
  foreach ($form_state['values']['nodes'] as $album_nid => $tracks) {
    foreach ($tracks as $nid => $item) {
      $node = node_load($nid);
      $item = (object)$item;
      if ($node->field_gracenote_lyrics[0]['m2id'] != $item->field_gracenote_lyrics[0]['m2id']) {
        node_object_prepare($node);
        $node->field_gracenote_lyrics[0] = $item->field_gracenote_lyrics[0];
        node_validate($node, $form['nodes'][$nid]);
        node_save($node);
        drupal_set_message(t('Updated lyrics for track %track_title.', array('%track_title' => $node->title)));
      }
      $node = null;
    }
  }
  $form_state['redirect'] = 'admin/sony/lyrics_admin';
}

function theme_sonybmg_discography_lyrics_admin($form) {
  foreach (element_children($form['nodes']) as $nid) {
    $node = $form['nodes']['#node'];
  }

  return drupal_render($form);
}

/**
 * Implementation of hook_sony_metatags_alter().
 */
function sonybmg_discography_sony_metatags_alter(&$meta_tags, $object_type = NULL, $object = NULL) {
  if ($object_type == 'node' && ($object->type == 'album' || $object->type == 'track')) {
    $cid = 'sonybmg_metatags:' . $object->nid;
    if ($object->type == 'album') {
      $cache = cache_get($cid, 'cache');
      if (!empty($cache)) {
        $row = $cache->data;
      }
      else {
        $db_url = content_database_info(content_fields('field_audio_file_url'));
        $db_disc = content_database_info(content_fields('field_disc_number'));
        $db_track = content_database_info(content_fields('field_track_number'));
        $db_album = content_database_info(content_fields('field_album'));
        // NOTE: This assumes that the track and disc fields stay on the same
        // table so we can avoid the performance hit of an ORDER BY across
        // tables.
        if ($db_track['table'] != $db_disc['table']) {
          $row = NULL;
        }
        else {
          $row = db_fetch_object(db_query_range("SELECT n.title, ctu." . $db_url['columns']['value']['column'] . " AS audio_url
            FROM {node} n
            INNER JOIN {" . $db_album['table'] . "} cta ON n.vid = cta.vid
            INNER JOIN {" . $db_track['table'] . "} ctt ON n.vid = ctt.vid
            INNER JOIN {" . $db_url['table'] . "} ctu ON n.vid = ctu.vid
            WHERE cta." . $db_album['columns']['nid']['column'] . " = %d
            ORDER BY ctt." . $db_disc['columns']['value']['column'] . " ASC, ctt." . $db_track['columns']['value']['column'] . " ASC", $object->nid, 0, 1));
        }
        if ($row !== NULL) {
          cache_set($cid, $row, 'cache');
        }
      }

      $audio_url = $row->audio_url;
      $image_url = empty($object->field_album_cover[0]['filepath']) ? NULL : $object->field_album_cover[0]['filepath'];
      $type = 'album';
      $description = check_plain($row->title);
    }
    else if ($object->type == 'track') {
      $cache = cache_get($cid, 'cache');
      if (!empty($cache)) {
        $row = $cache->data;
      }
      else {
        $db_info = content_database_info(content_fields('field_album_cover'));
        $row = db_fetch_object(db_query("SELECT n.title, f.filepath AS image_url
          FROM {node} n
          LEFT JOIN {" . $db_info['table'] . "} cta ON n.vid = cta.vid
          LEFT JOIN {files} f ON f.fid = cta." . $db_info['columns']['fid']['column'] . "
          WHERE n.nid = %d", $object->field_album[0]['nid']));
        if ($row !== FALSE) {
          cache_set($cid, $row, 'cache');
        }
      }

      $audio_url = empty($object->field_audio_file_url[0]['value']) ? NULL : $object->field_audio_file_url[0]['value'];
      $image_url = $row->image_url;
      $type = 'song';
      $description = t('Track #@num from @title', array('@num' => $object->field_track_number[0]['value'], '@title' => $row->title));
    }

    $meta_tags['og:title'] = array('property' => 'og:title', 'content' => check_plain($object->title));
    $meta_tags['og:url'] = array('property' => 'og:url', 'content' => url('node/'. $object->nid, array('absolute' => TRUE)));
    $meta_tags['og:type'] = array('property' => 'og:type', 'content' => $type);
    if (!empty($description)) {
      $meta_tags['og:description'] = array('property' => 'og:description', 'content' => $description);
    }
    if (!empty($audio_url)) {
      $meta_tags['og:audio'] = array('property' => 'og:audio', 'content' => $audio_url);
    }
    if (!empty($image_url)) {
      $meta_tags['og:image'] = array('property' => 'og:image', 'content' => imagecache_create_url('300x300', $image_url));
    }
  }
}
