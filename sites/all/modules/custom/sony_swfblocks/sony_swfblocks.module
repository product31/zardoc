<?php
// $Id: swfobject.module,v 1.2.2.1 2006/12/14 14:23:57 rz Exp $

// Implementation of hook_menu()
function sony_swfblocks_menu(){
  $items = array();
  $items['admin/settings/swfobject'] = array(
    'title' => t('SWF Object'),
    'description' => t('Select the number of independent SWF blocks, and enable debug mode.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sony_swfblocks_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

// Implementation of hook_settings()
function sony_swfblocks_admin_settings() {
  $form['sony_swfblocks_number'] = array(
    '#type' => 'select',
    '#title' => t('Number of Flash Gallery Blocks'),
    '#description' => t('The total number of independent Flash Gallery Blocks you want.'),
    '#default_value' => variable_get('sony_swfblocks_number', '1'),
    '#options' => drupal_map_assoc(array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
  );
  $form['sony_swfblocks_debug'] = array(
    '#type' => 'select',
    '#title' => t('Debug'),
    '#description' => t('Debug mode will display the raw html and javascript instead of using it to display the flash.'),
    '#default_value' => variable_get('sony_swfblocks_debug', 'normal'),
    '#options' => drupal_map_assoc(array('normal','debug'))
  );
  $form['sony_swfblocks_replace'] = array(
    '#type' => 'select',
    '#title' => t('On upload'),
    '#description' => t('Whether you want to create a new unique file or replace the old one when re-uploading a file with the same name as a previous file.'),
    '#default_value' => variable_get('sony_swfblocks_replace', 'Replace previous file'),
    '#options' => drupal_map_assoc(array('Replace previous file','Create unique file name'))
  );
  return system_settings_form($form);
}

// Implementation of hook_block()
function sony_swfblocks_block($op = 'list', $delta = 1, $edit = array()) {
  global $user;

  switch ($op) {
    case 'list':
      for ($i=1;$i<=variable_get('sony_swfblocks_number', '1');$i++) {
        $blocks[$i]['info'] = variable_get('sony_swfblocks_name_'. $i, 'swfobject ' . $i) . ' (swfobject)';
        $blocks[$i]['cache'] = BLOCK_NO_CACHE;
      }
      return $blocks;
    break;

    case 'configure':
      $form['sony_swfblocks_name_'. $delta] = array(
        '#type' => 'textfield',
        '#title' => t('Block Name'),
        '#default_value' => variable_get('sony_swfblocks_name_'. $delta, 'Flash Gallery ' . $delta)
      );
      $form['upload_method'] = array(
        '#type' => 'fieldset',
        '#title' => t('Upload Method'),
        '#collapsible' => false,
      );
      if (strstr($_SERVER["SERVER_NAME"], 'dev.') OR (!strstr($_SERVER["SERVER_NAME"], '.com') OR !strstr($_SERVER["SERVER_NAME"], '.net'))) {
      $form['upload_method'] = array(
        '#type' => 'fieldset',
        '#title' => t('Upload Method'),
        '#collapsible' => false,
        '#description' => t('<ul><li>Choose "<strong>Upload File</strong>" if you are rapidly testing a flash file.</li><li>Choose "<strong>Platform URL</strong>" to test flash file submitted to <a href="http://admin.theplatform.com">the Platform</a> before submitting to live.</li><li><strong>YOU MUST TEST</strong> all links from Platform file before commiting to live sites.</li></ul>')
      );
      $form['upload_method']['file'] = array(
        '#type' => 'fieldset',
        '#title' => t('Upload File'),
        '#collapsible' => true,
        '#collapsed' => true
      );
      $form['upload_method']['file']['sony_swfblocks_swf_'. $delta . '_file'] = array(
          '#type' => 'file',
          '#title' => t('Upload Flash file (.swf)'),
          '#description' => t('The Flash file to appear in the block.'),
      );
      }
      $form['upload_method']['url'] = array(
        '#type' => 'fieldset',
        '#title' => t('Platform URL'),
        '#collapsible' => true,
        '#collapsed' => true
      );
      if (variable_get('sony_swfblocks_swf_'. $delta, '')) {
        $form['upload_method']['current_swf'] = array(
          '#value' => t('Current swf: ') . str_replace(array('%h', '%t'), array(base_path(), path_to_theme()), variable_get('sony_swfblocks_swf_'. $delta, '')),
        );
      }

      $form['upload_method']['url']['sony_swfblocks_swf_'. $delta . '_url'] = array(
          '#type' => 'textfield',
          '#title' => t('URL Provided by "The Platform"'),
          '#description' => t('The Flash file to appear in the block.'),
        );
      /**
       * Required flash movie parameters
       */
      $form['req'] = array(
        '#type' => 'fieldset',
        '#title' => t('Required Attributes'),
        '#collapsible' => false
      );
      $form['req']['sony_swfblocks_id_'.$delta] = array(
        '#type' => 'textfield',
        '#title' =>t('Id'),
        '#default_value' => variable_get('sony_swfblocks_id_'.$delta, 'id'),
        '#description' =>t("The ID of your object or embed tag. The embed tag will also have this value set as it's name attribute for files that take advantage of swliveconnect.")
      );
      $form['req']['sony_swfblocks_width_'. $delta] = array(
        '#type' => 'textfield',
        '#title' => t('Width'),
        '#default_value' => variable_get('sony_swfblocks_width_'. $delta, '400'),
        '#size' => 5,
        '#description' => t('The width of the gallery in pixels, but without px')
      );
      $form['req']['sony_swfblocks_height_'. $delta] = array(
        '#type' => 'textfield',
        '#title' => t('Height'),
        '#default_value' => variable_get('sony_swfblocks_height_'. $delta, '400'),
        '#size' => 5,
        '#description' => t('The height of the gallery in pixels, but without px')
      );
      $form['req']['sony_swfblocks_version_'.$delta] = array(
        '#type' => 'textfield',
        '#title' => t('Version'),
        '#default_value' => variable_get('sony_swfblocks_version_'. $delta, '7'),
        '#size' => 5,
        '#description' => t('The required player version for your Flash content. This can be a string in the format of majorVersion.minorVersion.revision. An example would be: 6.0.65. Or you can just require the major version, such as 6.'),
      );
      $form['req']['sony_swfblocks_bgcolor_'. $delta] = array(
        '#type' => 'textfield',
        '#title' => t('Background color'),
        '#default_value' => variable_get('sony_swfblocks_bgcolor_'. $delta, '#FFFFFF'),
        '#size' => 10,
        '#description' => t('This is the hex value of the background color of your Flash movie. (ex: #FFFFFF)')
      );
      $form['req']['sony_swfblocks_provide_container_'. $delta] = array(
        '#type' => 'checkbox',
        '#title' => t('Provide Container?'),
        '#default_value' => variable_get('sony_swfblocks_provide_container_'. $delta, 1),
        '#description' => t('Check this box to provide a placeholder div for the flash movie.  It this is unchecked, you <b>must</b> specify the id of the'.
                           'container element to replace in the box below.'),
      );
      $form['req']['sony_swfblocks_container_id_'. $delta] = array(
        '#type' => 'textfield',
        '#title' => t('Container Element id'),
        '#default_value' => variable_get('sony_swfblocks_container_id_'. $delta, 'swfobject-container-'.$delta),
        '#description' => t('Enter a valid DOM id for the container Element. If the above checkbox is not checked, '.
                            'make sure to specify the id of an <b>existing</b> element.'),
        '#size' => 20,
      );
      $form['req']['sony_swfblocks_container_text_'. $delta] = array(
        '#type' => 'textarea',
        '#title' => t('Container Placeholder Text'),
        '#default_value' => variable_get('sony_swfblocks_container_text_'. $delta,
                            '<a href="http://www.macromedia.com/go/getflashplayer">Get Flash Player</a>'),
        '#rows' => 4,
        '#cols' => 60,
        '#description' => t('This is the text to be shown if swfobject cannot load the flash movie.'),
      );

      /**
       * Optional flash movie parameters
       */
      $form['opt'] = array(
        '#type' => 'fieldset',
        '#title' => t('Optional Attributes'),
        '#collapsible' => true,
        '#collapsed' => true,
      );
      $form['opt']['sony_swfblocks_wmode_'. $delta] = array(
        '#type' => 'select',
        '#title' => t('WMODE'),
        '#description' => t('Sets the Window Mode property of the Flash movie for transparency, layering, and positioning in the browser.
                             <ul><li><b>Window</b> movie plays in its own rectangular window on a web page.</li>
                                 <li><b>Opaque</b> the movie hides everything on the page behind it.</li>
                                 <li><b>Transparent</b> the background of the HTML page shows through all transparent portions of the movie, this may slow animation performance.</li></ul>
                                 <b>Note:</b> This property is not supported in all browsers and platforms.'),
        '#default_value' => variable_get('sony_swfblocks_wmode_'. $delta,'default'),
        '#options' => drupal_map_assoc(array('default','window','opaque','transparent')),
      );
      $form['opt']['sony_swfblocks_play_'. $delta] = array(
        '#type' => 'select',
        '#title' => t('Play'),
        '#description' => t('Specifies whether the movie begins playing immediately on loading in the browser. The default value is true if this attribute is omitted.'),
        '#default_value' => variable_get('sony_swfblocks_play_'. $delta,'default'),
        '#options' => drupal_map_assoc(array('default','true','false')),
      );
      $form['opt']['sony_swfblocks_loop_'. $delta] = array(
        '#type' => 'select',
        '#title' => t('Loop'),
        '#description' => t('Specifies whether the movie repeats indefinitely or stops when it reaches the last frame. The default value is true if this attribute is omitted.'),
        '#default_value' => variable_get('sony_swfblocks_loop_'. $delta,'default'),
        '#options' => drupal_map_assoc(array('default','true','false')),
      );
      $form['opt']['sony_swfblocks_menu_'. $delta] = array(
        '#type' => 'select',
        '#title' => t('Menu'),
        '#description' => t('<ul><li><b>True</b> displays the full menu, allowing the user a variety of options to enhance or control playback.</li>' .
            '                    <li><b>False</b> displays a menu that contains only the Settings option and the About Flash option.</li></ul>'),
        '#default_value' => variable_get('sony_swfblocks_menu_'. $delta,'default'),
        '#options' => drupal_map_assoc(array('default','true','false')),
      );
      $form['opt']['sony_swfblocks_quality_'. $delta] = array(
        '#type' => 'select',
        '#title' => t('Quality'),
        '#description' => t('<ul><li><b>Low</b> favors playback speed over appearance and never uses anti-aliasing.</li>
                             <li><b>Autolow</b> emphasizes speed at first but improves appearance whenever possible. Playback begins with anti-aliasing turned off. If the Flash Player detects that the processor can handle it, anti-aliasing is turned on.</li>
                             <li><b>Autohigh</b> emphasizes playback speed and appearance equally at first but sacrifices appearance for playback speed if necessary. Playback begins with anti-aliasing turned on. If the actual frame rate drops below the specified frame rate, anti-aliasing is turned off to improve playback speed. Use this setting to emulate the View > Antialias setting in Flash.</li>
                             <li><b>Medium</b> applies some anti-aliasing and does not smooth bitmaps. It produces a better quality than the Low setting, but lower quality than the High setting.</li>
                             <li><b>High</b> favors appearance over playback speed and always applies anti-aliasing. If the movie does not contain animation, bitmaps are smoothed; if the movie has animation, bitmaps are not smoothed.</li>
                             <li><b>Best</b> provides the best display quality and does not consider playback speed. All output is anti-aliased and all bitmaps are smoothed.</li></ul>'),
        '#default_value' => variable_get('sony_swfblocks_quality_'. $delta,'default'),
        '#options' => drupal_map_assoc(array('default','low', 'autolow', 'autohigh', 'high', 'best')),
      );
      $form['opt']['sony_swfblocks_scale_'. $delta] = array(
        '#type' => 'select',
        '#title' => t('Scale'),
        '#description' => t('<ul><li><b>Default (Show all)</b> makes the entire movie visible in the specified area without distortion, while maintaining the original aspect ratio of the movie. Borders may appear on two sides of the movie.</li>
                                 <li><b>No Border</b> scales the movie to fill the specified area, without distortion but possibly with some cropping, while maintaining the original aspect ratio of the movie.</li>
                                 <li><b>Exact Fit</b> makes the entire movie visible in the specified area without trying to preserve the original aspect ratio. Distortion may occur.</li></ul>'),
        '#default_value' => variable_get('sony_swfblocks_scale_'. $delta,'default'),
        '#options' => drupal_map_assoc(array('default','showall', 'noborder', 'exactfit')),
      );

      /**
       * Flash Variables
       */
      $form['vars'] = array(
        '#type' => 'fieldset',
        '#title' => 'Flash Variables',
        '#collapsible' => true,
        '#collapsed' => true,
      );
      $form['vars']['sony_swfblocks_flashvars_'.$delta] = array(
        '#type' => 'textarea',
        '#title' => t('Flash Variables'),
        '#cols' => 40,
        '#rows' => 5,
        '#default_value' => variable_get('sony_swfblocks_flashvars_'. $delta,''),
        '#description' => t('Used to send root level variables to the movie.<br />
                           Specify name=>value pairs with each pair on a separate line.'),
      );
      return $form;
    break;

    case 'save':
      foreach($edit as $key=>$value){
        if(strpos($key, 'sony_swfblocks_') === 0 && strpos($key, 'sony_swfblocks_swf_') !== 0){
          if($value == 'default'){
            // do not store default variables
            variable_del($key);
          }else{
            variable_set($key,$value);
          }
        }
      }

      $file_dir = file_directory_path() .'/swfobject';
      file_check_directory($file_dir, FILE_CREATE_DIRECTORY);

      if ($file = file_save_upload('sony_swfblocks_swf_'.$delta .'_file', $validators = array(), $file_dir .'/'. $file->name, (variable_get('sony_swfblocks_replace', 'Replace previous file') == 'Replace previous file' ? FILE_EXISTS_REPLACE : FILE_EXISTS_RENAME))) {
        variable_set('sony_swfblocks_swf_'.$delta, base_path() . $file->filepath);
        file_set_status($file, FILE_STATUS_PERMANENT);
      }

      if($file = $edit['sony_swfblocks_swf_'.$delta .'_url']) {
        variable_set('sony_swfblocks_swf_'.$delta, $file);
      }

      if(isset($edit['sony_swfblocks_provide_container_'.$delta])){
        variable_set('sony_swfblocks_provide_container_'.$delta,
                     $edit['sony_swfblocks_provide_container_'.$delta]);
      }else{
        variable_set('sony_swfblocks_provide_container_'.$delta,0);
      }
    break;

    case 'view':
      drupal_add_js(drupal_get_path('module','swfobject').'/js/swfobject.js');
      if(variable_get('sony_swfblocks_debug', 'normal') == 'debug'){
        $block['content'] = '<pre>' . htmlspecialchars(_sony_swfblocks_block_view($delta)) . '</pre>';
      }else{
        $block['content'] = _sony_swfblocks_block_view($delta);
      }
      return $block;
    break;
  }
}

/*
 * Implementation of hook_form_alter()
 */
function sony_swfblocks_form_alter(&$form, $form_state, $form_id) {
  // Need to set encoding type in a form_alter because above block config form goes
  // through block_admin_configure.
  if ($form_id == 'block_admin_configure' && $form['module']['#value'] == 'swfobject') {
    $form['#attributes']['enctype'] = 'multipart/form-data';
  }
}

function sony_swfblocks_theme() {
  return array(
    'swfobject' => array(
      'arguments' => array(
        'path' => '',
        'id' => '',
        'params' => array(),
        'flashvars' => array(),
        'options' => array(),
      ),
    ),
    'swfobject_block_view' => array(
      'arguments' => array('delta' => NULL),
    ),
  );
}

function _sony_swfblocks_block_view($delta) {

  // Setup swf location with wildcard replacement as needed.
  $swf = str_replace(
    array('%h', '%t'),
    array(base_path(), path_to_theme()),
    variable_get("sony_swfblocks_swf_{$delta}", 'movie.swf'));

  $param_defaults = array(
    'id' => 'movie',
    'width' => '400',
    'height' => '400',
    'version' => '7',
    'bgcolor' => '#FFFFFF',
  );
  // Fetch config values.
  foreach($param_defaults as $key=>$val){
    $params[$key] = variable_get("sony_swfblocks_{$key}_{$delta}", $val);
  }
  // Fetch non-default optional config values.
  foreach (array('wmode', 'play', 'loop', 'menu', 'quality', 'scale') as $key) {
    if ($val = variable_get("sony_swfblocks_{$key}_{$delta}", false)){
      $params[$key] = $val;
    }
  }

  // Build a list of flashvars.
  $flashvars = array();
  $lines = split("\n", variable_get('sony_swfblocks_flashvars_' . $delta, array()));
  foreach ($lines as $line) {
    list($key,$val) = split('=>', trim($line));
    if ($key && $val) {
      $flashvars[$key] = $val;
    }
  }

  $options = array();

  // Container options.
  $options['provided'] = !variable_get('sony_swfblocks_provide_container_' . $delta, 1);
  $options['id'] = variable_get('sony_swfblocks_container_id_' . $delta, 'swfobject-container-' . $delta);
  $options['text'] = variable_get('sony_swfblocks_container_text_' . $delta, '<a href="http://www.macromedia.com/go/getflashplayer">Get Flash Player</a>');

  return theme('swfobject', $swf, 'swfobject' . $delta, $params, $flashvars, $options);
}

// helper function for displaying the actual block
function theme_swfobject_block_view($delta = 1) {
  watchdog("swfobject", "Call to deprecated theme_sony_swfblocks_block_view().");
  return _sony_swfblocks_block_view($delta);
}

function theme_swfobject($path, $id, $params = array(), $flashvars = array(), $options = array()) {

  drupal_add_js(drupal_get_path('module','swfobject') . '/js/swfobject.js');
  $output = '';

  $options = array_merge($options, array(
    'id' => str_replace('_', '-', $id),
    'text' => '<a href="http://www.macromedia.com/go/getflashplayer">Get Flash Player</a>',
  ));
  // Foo...
  if (!$options['provided']) {
    $output .= "<div id='{$options['id']}'>{$options['text']}</div>\n";
  }

  // Required parameter fields and defaults.
  $req_params = array(
    'swf' => $path,
    'id' => 'movie',
    'width' => '400',
    'height' => '400',
    'version' => '7',
    'bgcolor' => '#FFFFFF',
  );
  $required = array();
  foreach ($req_params as $k => $v) {
    $required[$k] = isset($params[$k]) ? $params[$k] : $v;
  }

  // Wildcard replacement for swf file.
  // TODO Maybe not?
  $required['swf'] = str_replace(array('%h', '%t'), array(base_path(), path_to_theme()), $required['swf']);

  // Optional parameter fields.
  $opt_params = array();
  foreach (array('wmode', 'play', 'loop', 'menu', 'quality', 'scale') as $v) {
    if (isset($params[$v])) {
      $opt_params[$v] = $params[$v];
    }
  }

  // Join required params to make argument string.
  $args = '"' . join($required, '","') . '"';

  $output .= "<script type='text/javascript'>\n"
    . "var $id = new SWFObject($args);\n";

  // addParam all optional parameters.
  foreach($opt_params as $k => $v) {
    $output .= "$id.addParam('$k', '$v');\n";
  }

  // addVariable all flashvars.
  foreach ($flashvars as $k => $v) {
    $output .= "$id.addVariable('$k', '$v');\n";
  }

  $output .= $options['extra'];

  // Do the replacement.
  $output .= "$id.write('{$options['id']}');\n"
    . "</script>\n";
  return $output;
}
