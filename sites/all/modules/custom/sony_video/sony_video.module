<?php
// $Id$

/**
 * @file
 * Allows an admin to enter a Brightcove playlist ID and automatically have a 
 * FeedAPI feed created that populates video feeds using the sonyVideo eparser
 * (which is included in this module)
 * 
 */

/**
 * Implementation of hook_menu.
 */
function sony_video_menu() {
  $items = array();
  $items['admin/sony/setup_video_import'] = array(
    'title' => 'Setup Video Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sony_video_setup_import_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'sony_video.pages.inc',
  );
  return $items;
}

/**
 * Definition for custom sonyVideo eparser which understands our crazy brightcove
 * implementation.
 */
function sony_video_eparse_type_plugins() {
  $base_path = drupal_get_path('module', 'sony_video') . '/plugins';
  return array(
    'sonyVideo' => array(
      'name' => 'Sony Video',
      'description' => 'Custom Sony Video parser',
      'handler' => array(
        'class' => 'FeedapiEparserTypeSonyVideo',
        'parent' => 'brightcove3',
      ),
      'system' => FALSE,
      'path' => $base_path,
    ),
   );
}

/**
 * Implementation of hook_sony_metatags_alter().
 */
function sony_video_sony_metatags_alter(&$meta_tags, $object_type = NULL, $object = NULL) {
  if ($object_type == 'node' && $object->type == 'video') {
    $meta_tags['og:type'] = array('property' => 'og:type', 'content' => 'song');
    $meta_tags['og:title'] = array('property' => 'og:title', 'content' => check_plain($object->title));
    $meta_tags['og:url'] = array('property' => 'og:url', 'content' => url('node/'. $object->nid, array('absolute' => TRUE)));
    if (!empty($object->field_video[0]['data']['longDescription'])) {
      $meta_tags['og:description'] = array('property' => 'og:description', 'content' => check_plain($object->field_video[0]['data']['longDescription']));
    }
    if (!empty($object->field_video_thumb[0]['filepath'])) {
      $thumbnail_url = imagecache_create_url('300x300', $object->field_video_thumb[0]['filepath']);
    }
    else if (!empty($object->field_video[0]['data']['thumbnail'])) {
      $thumbnail_url = imagecache_create_url('300x300', $object->field_video[0]['data']['thumbnail']);
    }
    if (isset($thumbnail_url)) {
      $meta_tags['og:image'] = array('property' => 'og:image', 'content' => $thumbnail_url);
    }
  }
}
