<?php
// $Id$

/**
 * @file
 * Dashboard charting module
 */

define('DASHBOARD_INTERVAL_DAY', 'D');
define('DASHBOARD_INTERVAL_WEEK', 'W');
define('DASHBOARD_INTERVAL_MONTH', 'M');
define('DASHBOARD_INTERVAL_YEAR', 'Y');

/**
 * Implmentation of hook_menu().
 */
function dashboard_menu() {
  $items['dashboard'] = array(
    'title' => 'Charts',
    'page callback' => 'dashboard_charts',
  	'access arguments' => array('access dashboard'),
  );
  $items['dashboard/%/%'] = array(
    'title' => 'Charts',
    'page callback' => 'dashboard_charts',
    'page arguments' => array(1, 2),
  	'access arguments' => array('access dashboard'),
  );
  $items['dashboard/%dashboard_chart'] = array(
    'title' => 'Charts',
    'page callback' => 'dashboard_chart_page',
    'page arguments' => array(1),
  	'access arguments' => array('access dashboard'),
  );
  $items['dashboard/%dashboard_chart/%/%'] = array(
    'title' => 'Charts',
    'load arguments' => array(2,3),
    'page callback' => 'dashboard_chart_page',
    'page arguments' => array(1),
  	'access arguments' => array('access dashboard'),
  );
  
  return $items;
}

/**
 * Menu load callback
 *
 * @param $chart_id
 * @param $interval
 * @param $date
 */
function dashboard_chart_load($chart_id, $interval = DASHBOARD_INTERVAL_DAY, $date = NULL) {
  $date = isset($date) ? $date : time();
  $cid = $chart_id .':'. $interval .':'. $date;

  $start = microtime(TRUE);
  if(($cache = cache_get($cid, 'cache')) && $cache->data) {
    $chart = $cache->data;
    $chart['#cached'] = 1;
    $chart['#build_time'] = microtime(TRUE) - $start;
    return $chart;
  }
  
  list($y, $m, $d) = explode('-', date('Y-m-d', $date));
  switch($interval) {
    case DASHBOARD_INTERVAL_DAY:
      $from = mktime(0, 0, 0, $m, $d, $y);
      $to = mktime(0, 0, 0, $m, $d + 1, $y);
      $prev = mktime(0, 0, 0, $m, $d - 1, $y);  
      break;
      
    case DASHBOARD_INTERVAL_WEEK:
      $from = mktime(0, 0, 0, $m, $d, $y);
      $to = mktime(0, 0, 0, $m, $d + 7, $y);
      $prev = mktime(0, 0, 0, $m, $d - 7, $y);
      break;

    case DASHBOARD_INTERVAL_MONTH:
      $from = mktime(0, 0, 0, $m, 1, $y);
      $to = mktime(0, 0, 0, $m + 1, 1, $y);
      $prev = mktime(0, 0, 0, $m - 1, 1, $y);
      break;
      
  }

  if(function_exists($chart_id)) {
    $chart = call_user_func($chart_id, $interval, $from, $to);
  }
  
  $chart['#interval'] = $interval;
  $chart['#previous'] = $prev;
  $chart['#previous_href'] = 'dashboard/'. $chart['#chart_id'] .'/'. $chart['#interval'] .'/'. $chart['#previous'];
  $chart['#next'] = $to;
  $chart['#next_href'] = 'dashboard/'. $chart['#chart_id'] .'/'. $chart['#interval'] .'/'. $chart['#next'];
  
  cache_set($cid, $chart, 'cache');
  
  $chart['#build_time'] = microtime(TRUE) - $start;
  return $chart;
}

/**
 * Menu page callback
 */
function dashboard_chart_page($chart) {
  if($_GET['js']) {
    dashboard_chart_page_json($chart);
    return;
  }
  
  $output .= chart_render($chart, array('width' => $chart['#size']['#width'], 'height' => $chart['#size']['#height']));
  $links[] = array(
    'title' => t('Previous'),
    'href' => $chart['#previous_href'],
    'attributes' => array('class' => 'dashboard-previous'),
  );
  $links[] = array(
    'title' => t('Next'),
    'href' => $chart['#next_href'],
    'attributes' => array('class' => 'dashboard-next'),
  );
  
  $output .= theme('links', $links);
  
  drupal_add_css(drupal_get_path('module', 'dashboard') .'/dashboard.css');
  drupal_add_js(drupal_get_path('module', 'dashboard') .'/dashboard.js');
  return '<div class="dashboard-chart">'. $output .'</div>';
}

/**
 * JSON callback
 */
function dashboard_chart_page_json($chart) {
  $chart_query_string = chart_build($chart);    
  $data = array(
    'img_src' => CHART_URI .'?'. $chart_query_string,
    'previous_href' => url($chart['#previous_href']),
    'next_href' => url($chart['#next_href']),
    'cached' => $chart['#cached'] ? 1 : 0,
    'build_time' => $chart['#build_time'],
  );
  print drupal_to_js($data);
  exit();  
}

/**
 * Chart building callback function
 */
function dashboard_chart_node_activity($interval, $from, $to) {
  $chart = array();
  
  switch($interval) {
    case DASHBOARD_INTERVAL_DAY:
      $max = db_result(db_query('SELECT COUNT(n.nid) as `count` FROM {node} n GROUP BY FROM_UNIXTIME(n.changed, "%%Y-%%m-%%e-%%k") ORDER BY `count` DESC LIMIT 1'));
      $sql = 'SELECT FROM_UNIXTIME(n.changed, "%%k") as `label`, COUNT(n.nid) as `count` FROM {node} n WHERE n.changed > %d AND n.changed < %d GROUP BY `label` ORDER BY n.changed ASC';
      $range = range(0, 23);
      $title = t('Nodes created on !date', array('!date' => date('F j, Y', $from)));
      break;
      
    case DASHBOARD_INTERVAL_WEEK:
      //$max = db_result(db_query('SELECT COUNT(n.nid) as `count` FROM {node} n GROUP BY FROM_UNIXTIME(n.changed, "%%Y-%%m-%%e") ORDER BY `count` DESC LIMIT 1'));
      $max = db_result(db_query('SELECT COUNT(n.nid) as `count` FROM {node} n GROUP BY FROM_UNIXTIME(n.changed, "%%Y-%%m-%%e-%%k") ORDER BY `count` DESC LIMIT 1'));
      $sql = 'SELECT FROM_UNIXTIME(n.changed, "%%e-%%k") as `label`, COUNT(n.nid) as `count` FROM {node} n WHERE n.changed > %d AND n.changed < %d GROUP BY `label` ORDER BY n.changed ASC';
      $d = date('j', $from);
      $range = array();
      $d2 = $d + 7;
      $labels = range($d, $d2);
      for($d; $d < $d2; $d++) {
        for($h = 0; $h < 24; $h++) {
          $range[] = $d .'-'. $h;
        }
      }
      //dsm($range);
      $title = t('Nodes created from !from to !to', array('!from' => date('F j, Y', $from), '!to' => date('F j, Y', $to)));
      break;

    case DASHBOARD_INTERVAL_MONTH:
      $max = db_result(db_query('SELECT COUNT(n.nid) as `count` FROM {node} n GROUP BY FROM_UNIXTIME(n.changed, "%%Y-%%m-%%e") ORDER BY `count` DESC LIMIT 1'));
      $sql = 'SELECT FROM_UNIXTIME(n.changed, "%%e") as `label`, COUNT(n.nid) as `count` FROM {node} n WHERE n.changed > %d AND n.changed < %d GROUP BY `label` ORDER BY n.changed ASC';
      $d = date('t', $from);
      $range = range(1, $d);
      $title = t('Nodes created in !date', array('!date' => date('F Y', $from)));
      break;
  }

  $dates = array();                    
  $result = db_query($sql, $from, $to);
  while ($row = db_fetch_array($result)){
    $dates[$row['label']] = $row['count'];
  }
  //dsm($dates);

  $chart['#data'] = array(); 
  foreach($range as $label) {
    // zero values break the continuity of line graphs, so we use a decimal instead.
    $count = isset($dates[$label]) ? (int)$dates[$label] : 0.5;
    $chart['#data'][] = $count; 
    $chart['#mixed_axis_labels'][CHART_AXIS_X_BOTTOM][0][] = chart_mixed_axis_label((int)$label);
  }
  if($labels) {
    $chart['#mixed_axis_labels'][CHART_AXIS_X_BOTTOM][0] = array();
    foreach($labels as $label) {
      $chart['#mixed_axis_labels'][CHART_AXIS_X_BOTTOM][0][] = chart_mixed_axis_label((int)$label);      
    }
  }
  
  $chart['#line_styles'][] = chart_line_style(2);  
  $chart['#chart_id']   = 'dashboard_chart_node_activity';
  $chart['#title']      = chart_title($title);
  //$chart['#type']       = CHART_TYPE_BAR_V;
  $chart['#type']       = CHART_TYPE_LINE;
  $chart['#size']       = chart_size(950, 315);
  $chart['#grid_lines'] = chart_grid_lines(20, 20, 1, 5);
  if($dates) {
//    $max = ceil(max($dates) / 25) * 25;
    $chart['#mixed_axis_labels'][CHART_AXIS_Y_LEFT][0][] = chart_mixed_axis_range_label(0, $max);
    $chart['#adjust_resolution'] = array('#adjust' => TRUE, '#max' => $max);
  }
  
  return $chart;
}

function dashboard_image_src($chart_id, $width, $height) {
  if(function_exists($chart_id)) {
    $chart = call_user_func($chart_id);
  }
  $chart['#size'] = chart_size($width, $height);
  
  if ($chart_query_string = chart_build($chart)){
    return CHART_URI .'?'. $chart_query_string; 
  }  
}

function dashboard_charts($interval = DASHBOARD_INTERVAL_DAY, $date = NULL) {
  $date = $date ? $date: time();
  $chart = dashboard_chart_node_activity($interval, $date);
  $img = chart_render($chart);
  
  $output = $img .'<br/>'. $chart['#previous'] .' | '. $chart['#next'];
  if($_GET['js']) {
    print $output;
    exit;
  }
  drupal_add_js(drupal_get_path('module', 'dashboard') .'/dashboard.js');
  return '<div class="dashboard-chart">'. $output .'<div>';
}
