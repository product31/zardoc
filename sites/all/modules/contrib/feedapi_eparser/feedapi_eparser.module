<?php
// $Id: feedapi_eparser.module,v 1.31 2009/10/21 22:49:36 neclimdul Exp $
/**
 * @file
 * Feed API Extensible Parser.
 *
 * Allows an Extensible parser that can easily be extended to parse additional
 * namespaces out of an XML feed.
 */

/**
 * Implementation of hook_menu().
 */
function feedapi_eparser_menu() {
  $items = array();
  $items['node/%node/eparser'] = array(
    'title' => 'E-Parser',
    'page callback' => 'feedapi_eparser_wizard',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_feedapi_op_access',
    'access arguments' => array(1),
    'file' => 'feedapi_eparser.settings.inc',
  );
  return $items;
}

/**
 * Implementation of hook_nodeapi().
 *
 * We use this hook to track our feed settings and attach them to nodes.
 * Normally feedapi modules would do this using feedapi's storage but we sort
 * of need some extra logic.
 */
function feedapi_eparser_nodeapi(&$node, $op, $teaser, $page) {
  if (isset($node->feed) || feedapi_enabled_type($node->type)) {
    switch ($op) {
      case 'load':
        return array('eparse' => _feedapi_eparser_load_settings($node->nid));
        break;

      case 'delete':
        db_query("DELETE FROM {feedapi_eparser_node} WHERE nid = %d", $node->nid);
        break;
    }
  }
}

/**
 * Helper function to load eparser settings.
 *
 * @param $nid
 * Node id to load settings for.
 */
function _feedapi_eparser_load_settings($nid) {

  $info = new stdClass();

  $settings = db_fetch_object(db_query('SELECT type, namespaces, download, settings FROM {feedapi_eparser_node} WHERE nid = %d', $nid));
  if ($settings) {
    $info->type = $settings->type;
    $info->download = $settings->download;
    $info->namespaces = unserialize($settings->namespaces);
    $info->settings = unserialize($settings->settings);
  }

  return $info;
}

/**
 * Implementation of hook_feedapi_feed().
 */
function feedapi_eparser_feedapi_feed($op, $feed = false) {
  switch ($op) {
    case 'parse':
      // FeedAPI api inconsistencies mean we can't rely on the feed nid being
      // present. We have to have this to function so we just fail if its not
      // there. FeedAPI bug to fix. http://drupal.org/node/435778
      if ($feed && (isset($feed->nid) || isset($feed->eparse))) {
        if ($type_plugin = feedapi_eparser_load_type_plugin($feed)) {
          return $type_plugin->fetch();
        }
        else {
          drupal_set_message(t('You have to specify the eParser settings in the suitable <a href="!tab">tab</a>', array('!tab' => url( "node/$feed->nid/eparser"))), 'warning');
          return FALSE;
        }
      }
      break;
    case 'compatible':
      // This is a slippery, slippery problem. Since we actually don't know what plugins
      // support, or what type plugin people want to use, basically know zilch about
      // compatibility when this gets called. Yikes!
      //
      // We're just going to say we support everything and fix it in a different release.
      // @see http://drupal.org/node/561516

      // This value is manually updated when later EParser knows something.
      // @see feedapi_eparser_settings_finish()
      return 'E-Parser';
    default:
      //dpm($op);
      break;
  }
}

/**
 * Include some feedapi_eparse include file.
 *
 * Stores state so we don't require files more than needed.
 * @param $type
 * @return unknown_type
 */
function _feedapi_eparser_include($name) {
  static $include = array();
  module_load_include('inc', 'feedapi_eparser', 'feedapi_eparser.plugins');
  // Translate the include name to our filesystem name
  $file = "FeedapiEparse$name";
  if ($name && !isset($include[$name])) {
    if (module_load_include('inc', 'feedapi_eparser', $file) !== FALSE) {
      $include[$name] = TRUE;
    }
    else {
      $include[$name] = FALSE;
    }
  }

  return $include[$name];
}

/**
 * Load a type plugin for a feed.
 *
 * If the passed feed is not loaded with EParser settings, they will be
 * automatically added so you can pass the feed object from FeedAPI
 * directly or pass a version with yet to be saved values.
 *
 * @param $feed
 * A feed object.
 * @return
 * An initialized type plugin.
 */
function feedapi_eparser_load_type_plugin($feed) {
  static $plugin_cache = array();

  if (!isset($plugin_cache[$feed->nid])) {

    // Make sure they've got a new enough ctools version.
    if (!module_invoke('ctools', 'api_version', '1.2')) {
      return;
    }

    // Setup a cloned feed object that includes our eparser settings.
    // We clone so we don't accidently polute the feed object through a reference.
    $efeed = drupal_clone($feed);
    if (!isset($efeed->eparse)) {
      $efeed->eparse = _feedapi_eparser_load_settings($feed->nid);
    }

    // If eparse didn't load something was wrong and we can't continue.
    if (!$efeed->eparse) {
      return;
    }

    // We still need to include plugins because its got base classes and
    // other important things we need still.
    _feedapi_eparser_include('plugins');

    ctools_include('plugins');
    $class = ctools_plugin_load_class('eparse', 'type_plugins', $efeed->eparse->type, 'handler');
    if ($class) {
      $type_plugin = new $class;
      if ($type_plugin->init($efeed) !== FALSE) {
        $plugin_cache[$feed->nid] = $type_plugin;
      }
    }

    if (!isset($plugin_cache[$feed->nid])) {
      $plugin_cache[$feed->nid] = FALSE;
    }
  }

  return $plugin_cache[$feed->nid];
}

/**
 * Load a namespace plugin.
 *
 * This is similar to feedapi_eparser_load_type_plugin() but it does not
 * do any initializing or caching since our requirements are different.
 */
function feedapi_eparser_load_namespace_plugin($namespace, $efeed) {
  static $plugin_cache = array();

  if (!isset($plugin_cache[$efeed->nid][$namespace])) {

    if (!module_invoke('ctools', 'api_version', '1.2')) {
      return;
    }

    // We still need to include plugins because its got base classes and
    // other important things we need still.
    _feedapi_eparser_include('plugins');

    ctools_include('plugins');
    $class = ctools_plugin_load_class('eparse', 'namespace_plugins', $namespace, 'handler');
    if ($class) {
      $namespace_plugin = new $class;
      if ($namespace_plugin->init($efeed) !== FALSE) {
        $plugin_cache[$efeed->nid][$namespace] = $namespace_plugin;
      }
    }

    if (!isset($plugin_cache[$efeed->nid][$namespace])) {
      $plugin_cache[$efeed->nid][$namespace] = FALSE;
    }
  }

  return $plugin_cache[$efeed->nid][$namespace];
}

/**
 * Get a list of namespace plugins
 *
 * @return
 * An array of namespace plugins.
 */
function feedapi_eparser_get_namespace_plugins() {
  _feedapi_eparser_include('plugins');
  return _feedapi_eparser_get_namespace_plugins();
}

/**
 * Get a list of download plugins
 *
 * @return
 * An array of download plugins.
 */
function feedapi_eparser_get_download_plugins() {
  _feedapi_eparser_include('plugins');
  return _feedapi_eparser_get_download_plugins();
}

/**
 * Get a list of feed type plugins.
 *
 * @return
 * An array of feed_type plugins.
 */
function feedapi_eparser_get_type_plugins() {
  _feedapi_eparser_include('plugins');
  return _feedapi_eparser_get_type_plugins();
}
