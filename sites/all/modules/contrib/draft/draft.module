<?php
// $Id: draft.module,v 1.2.2.33 2009/04/20 19:41:11 darrenferguson Exp $

/**
 * @file
 * Module providing draft saving capability for Drupal
 */
define('DRAFT_PATH', drupal_get_path('module', 'draft'));

/**
 * Implementation of hook_perm().
 */
function draft_perm() {
  return array('access save as draft');
}

/**
 * Implementation of hook_menu()
 */
function draft_menu() {
  $items['admin/settings/draft'] = array(
    'title'            => 'Draft',
    'description'      => 'Configure draft settings.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('draft_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['draft/list'] = array(
    'title'            => 'Draft List',
    'page callback'    => 'draft_list',
    'access arguments' => array('access save as draft'),
    'type'             => MENU_CALLBACK,
  );
  $items['draft/remove'] = array(
    'title'            => 'Remove Draft',
    'page callback'    => 'draft_remove',
    'access arguments' => array('access save as draft'),
    'type'             => MENU_CALLBACK,
  );
  $items['draft/save'] = array(
    'title'            => 'Save Draft',
    'page callback'    => 'draft_save',
    'access arguments' => array('access save as draft'),
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Draft Module administration settings
 */
function draft_admin_settings() {
  $form['draft'] = array('#type' => 'fieldset', '#title' => t('Draft Settings'), '#collapsible' => TRUE, '#collapsed' => FALSE);
  $form['draft']['draft_autosave_interval'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Draft Autosave Interval'),
    '#default_value' => variable_get('draft_autosave_interval', 30),
    '#description'   => t('Time (Seconds) interval between automatic savings of the form'),
    '#size'          => 6,
  );
  $form['draft']['draft_form_elements_ignore'] = array(
    '#type' => 'textfield',
    '#title' => t('Ignore form elements'),
    '#default_value' => variable_get('draft_form_elements_ignore', 'op|form_token|form_build_id'),
    '#description' => t('List of form elements spilt by "|" that we do not wish to save i.e. form token, op buttons etc'),
  );
  $form['draft']['draft_on_edit'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow drafts when editing'),
    '#default_value' => variable_get('draft_on_edit', 0),
    '#description' => t('If checked then the module will allow you to save as draft when editing an already existing node'),
  );
  $form['draft']['draft_cron_remove_disabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable cron removal of drafts'),
    '#default_value' => variable_get('draft_cron_remove_disabled', 0),
    '#description' => t('If checked then cron will not remove any drafts from the system and they will continually accumulate'),
  );
  $form['draft']['draft_cron_remove_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount of time (Days) a draft can stay in the system without being updated'),
    '#default_value' => variable_get('draft_cron_remove_timeout', 1),
    '#description' => t('When a draft is originally created if the cron timeout is never set to 1 then it has never been updated so we need to allow these to remain for a little amount of time before they are removed'),
    '#size' => 6,
  );
  $form['draft']['draft_php_view_pager_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Numer of drafts per page in Draft List'),
    '#default_value' => variable_get('draft_php_view_pager_count', 20),
    '#description' => t('This is the number of drafts you will see on the php version of the draft list using the pager query'),
    '#size' => 6,
  );
  $form['draft']['draft_php_view_display_columns'] = array(
    '#type' => 'checkboxes',
    '#title' => t('PHP View Display Fields'),
    '#default_value' => variable_get('draft_php_view_display_columns', array()),
    '#options' => _draft_php_view_display_fields(),
    '#description' => t('Check the fields you wish to see displayed in the PHP View'),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_user()
 */
function draft_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'form':
      return draft_user_form($edit, $account, $category);
      break;

    case 'update':
      draft_user_update($edit, $account, $category);
      break;

    case 'validate':
      draft_user_validate($edit, $account);
      break;
  }
}


/**
 * Implementation of hook_cron()
 */
function draft_cron() {
  // Administrator does not want the module to remove the drafts from the system
  if (variable_get('draft_cron_remove_disabled', 0) == 0) {
    // Retrieve the administration configured timeout in days for the system
    $cron_remove_timeout = variable_get('draft_cron_remove_timeout', 1);
    // If someone has entered non numeric data reset to one day
    if (!is_numeric($cron_remove_timeout)) {
      variable_set('draft_cron_remove_timeout', 1);
      $cron_remove_timeout = 1;
    }
    // Multiply by 86400 seconds per day and then set the time to the timestamp - that amount
    $cron_remove_timeout = $cron_remove_timeout * 86400;
    $updated = time() - $cron_remove_timeout;
    // Remove any records that have never been updated and resided in the system longer than the updated
    db_query("DELETE FROM {drafts} WHERE cron_remove = 0 AND updated <= %d", $updated);
  }
}

/**
 * Implementation of hook_form_alter().
 */
function draft_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if (isset($form['type']) && isset($form['#node'])) {
    $node = $form['#node'];
    if (user_access('access save as draft') && isset($form['type']['#value']) && $form['type']['#value'] .'_node_form' == $form_id && variable_get("save_as_draft_$node->type", FALSE)) {
      // Allow drafts on Edit depending on whether the module administrator has said that is the case
      if (is_null($node->nid) || (variable_get('draft_on_edit', 0) && !is_null($node->nid))) {
        if ($_GET['draft_id'] && is_numeric($_GET['draft_id'])) {
          $result = db_fetch_object(db_query("SELECT * FROM {drafts} WHERE draft_id = %d", $_GET['draft_id']));

          if (is_null($result->uid)) {
            // Set not found if the draft does not exist
            drupal_not_found();
            die();
          } elseif ($result->uid != $user->uid) {
            // Deny the user access if the draft is not theirs
            drupal_access_denied();
            die();
          }
          // Checking if the form is in a submitted state if it is we do not want to re-populate anything in the form at this point
          // Since if the user has clicked Preview we would over write the information in the users preview with the old draft information
          if ($form_state['submitted'] == 1) {
            $settings['draft']['draft_populate_trigger'] = 0;
          }
          drupal_add_js('$(document).ready(function() { $(".draft_save").show(); setTimeout(Drupal.draft.populateForm, 2000); });', 'inline');
          $settings['draft']['form_data'] = unserialize($result->data);
          // At this point adding calling hook_draft() to determine if any other modules wish to add elements to the form
          // This functionality is here specifically for modules that utilize AJAX to create widgets in the form once it
          // Is already loaded in the system so that those fields can be pre-created and then will be populated by the module
          foreach (module_implements('draft') as $module) {
            module_invoke($module, 'draft', 'form elements', $_GET['draft_id'], unserialize($result->date), $form);
          }
        }
        // adding the pertinent javascript files to the page
        drupal_add_js(DRAFT_PATH .'/jquery.field.js');
        drupal_add_css(DRAFT_PATH .'/draft.css');
        drupal_add_js(DRAFT_PATH .'/draft.js');
        // setting the javascript settings we will require in order to utilize saving the form
        $settings['draft']['form_id'] = 'node-form';
        $settings['draft']['autosave'] = 0;
        $settings['draft']['img_url'] = url('draft/images');
        // User entered input so do checking on it to make sure we get a valid number
        $interval = variable_get('draft_autosave_interval', 30);
        if (!is_numeric($interval)) {
          $interval = 30;
        }
        $settings['draft']['interval'] = $interval * 1000;
        $settings['draft']['url'] = url('draft/save');
        $settings['draft']['button_id'] = 'edit-save-as-draft';
        $settings['draft']['form_elements_ignore'] = variable_get('draft_form_elements_ignore', 'op|form_token|form_build_id');
        $settings['draft']['node_type'] = $node->type;
        // This is for when we are in Edit Mode so we can send the node id back with the draft
        if (!is_null($node->nid)) {
          $settings['draft']['node_id'] = $node->nid;
        }
        // checking to see if autosave is enabled or not for this account
        if (variable_get('draft_autosave_'. $user->uid, 0)) {
          drupal_add_js('Drupal.draft.saveTimeout();', 'inline');
          // setting the autosave interval if the user has it set in their account since it can
          // over ride the administrator autosave timeout incase the user wishes it to be longer or shorter
          // Do checking on the variable to make sure we get a valid number
          if (($interval = variable_get('draft_autosave_interval_'. $user->uid, 0))) {
            if (is_numeric($interval) && $interval > 0) {
              $settings['draft']['interval'] = $interval * 1000;
            }
          }
          $settings['draft']['autosave'] = 1;
        }
        drupal_add_js($settings, 'setting');
        // button to save the node as a draft for later use
        $form['buttons']['save_as_draft'] = array(
          '#type' => 'button',
          '#value' => t('Save As Draft'),
          '#weight' => 15,
          '#attributes' => array('onclick' => 'if (typeof Drupal.draft == "undefined") { return false; }; return Drupal.draft.saveForm();'),
        );
        // adding the draft id field will either be populated if $_GET['draft_id'] is
        // set or will be set by the ajax handler when the save draft button is pushed
        if ($_GET['draft_id'] && is_numeric($_GET['draft_id'])) {
          $draft_id = $_GET['draft_id'];
        }
        else {
          if ($form_state['submitted'] == 1 && is_numeric($form_state['values']['draft_id'])) {
            $draft_id = $form_state['values']['draft_id'];
          }
          else {
            db_query("INSERT INTO {drafts} (node_type, uid, updated, data) VALUES ('%s', %d, %d, '%s')", $form['type']['#value'], $user->uid, time(), NULL);
            $draft_id = db_last_insert_id('drafts', 'draft_id');
          }
        }
        $form['draft_id'] = array(
          '#type' => 'hidden',
          '#value' => $draft_id,
        );
        $form['#submit'][] = 'draft_node_form_submit';
      }
    }
  }
}

/**
 * Implementation of hook_form_alter() for node_type_form
 */
function draft_form_node_type_form_alter(&$form, $form_state) {
  // Also add option to node settings form in the admin settings.
  if (isset($form['identity']['type'])) {
    $form['workflow']['save_as_draft'] = array(
      '#type' => 'radios',
      '#title' => t('Save As Draft'),
      '#default_value' => variable_get('save_as_draft_'. $form['#node_type']->type, 0),
      '#options' => array(t('Disabled'), t('Enabled')),
    );
    // trying to retrieve all of the fields for this particular node type
    // Only do this if the content module is enabled otherwise we don't do this
    if (module_exists('content')) {
      $fields = _draft_content_type_fields($form['#node_type']->type);
      // Only display if we actually have fields in the content type
      if (count($fields) > 1) {
        $form['workflow']['save_as_draft_title'] = array(
          '#type' => 'select',
          '#title' => t('Field to utilize for draft title'),
          '#default_value' => variable_get('save_as_draft_title_'. $form['#node_type']->type, ''),
          '#options' => $fields,
        );
        $form['workflow']['save_as_draft_body'] = array(
          '#type' => 'select',
          '#title' => t('Field to utilize for draft body'),
          '#default_value' => variable_get('save_as_draft_body_'. $form['#node_type']->type, ''),
          '#options' => $fields,
        );
      }
    }
  }
}

/**
 * Submission handler for when the node is submitted
 */
function draft_node_form_submit($form, &$form_state) {
  // check if we have a draft id associated with this submission if so we can remove it
  if ($form_state['values']['op'] == "Save") {
    if (isset($form_state['values']['draft_id']) && is_numeric($form_state['values']['draft_id'])) {
      db_query("DELETE FROM {drafts} WHERE draft_id = %d", $form_state['values']['draft_id']);
    }
  }
}

/**
 * Menu callback for displaying drafts in the system
 */
function draft_list() {
  global $user;

  $display_fields = variable_get('draft_php_view_display_columns', array());
  $entry = array();
  // retrieving the archived conversations for this particular temporary node type
  $header[] = array('data' => t('View Draft'), 'field' => 'draft_id');
  if (isset($display_fields['node_type']) && $display_fields['node_type'] === 'node_type') {
    $header[] = array('data' => t('Content Type'), 'field' => 'node_type');
  }
  if (isset($display_fields['uid']) && $display_fields['uid'] === 'uid') {
    $header[] = array('data' => t('Username'), 'field' => 'uid');
  }
  if (isset($display_fields['title']) && $display_fields['title'] === 'title') {
    $header[] = array('data' => t('Title'), 'field' => 'title');
  }
  if (isset($display_fields['body']) && $display_fields['body'] === 'body') {
    $header[] = array('data' => t('Body'), 'field' => 'body');
  }
  if (isset($display_fields['updated']) && $display_fields['updated'] === 'updated') {
    $header[] = array('data' => t('Last Updated'), 'field' => 'updated', 'sort' => 'desc');
  }
  if (isset($display_fields['cron_remove']) && $display_fields['cron_remove'] === 'cron_remove') {
    $header[] = array('data' => t('Cron Remove'), 'field' => 'cron_remove');
  }
  $sql = sprintf("SELECT * FROM {drafts} WHERE uid = %d". tablesort_sql($header), $user->uid);
  $count_sql = sprintf("SELECT DISTINCT draft_id FROM {drafts} WHERE uid = %d", $user->uid);
  $result = pager_query($sql, 20, NULL, $count_sql);
  while ($row = db_fetch_object($result)) {
    $data = unserialize($row->data);
    if (isset($data['node_id_from_server']) && is_numeric($data['node_id_from_server'])) {
      $output = l(t('View'), 'node/'. $data['node_id_from_server'] .'/edit', array('query' => array('draft_id' => $row->draft_id)));
    }
    else {
      $output = l(t('View'), 'node/add/'. str_replace("_", "-", $row->node_type), array('query' => array('draft_id' => $row->draft_id)));
    }
    $output .= ' | '. l(t('Delete'), 'draft/remove/'. $row->draft_id);
    $entry[$row->draft_id]['draft_id'] = $output;
    if (isset($display_fields['node_type']) && $display_fields['node_type'] === 'node_type') {
      $entry[$row->draft_id]['node_type'] = $row->node_type;
    }
    if (isset($display_fields['uid']) && $display_fields['uid'] === 'uid') {
      $cuser = user_load(array('uid' => $row->uid));
      $entry[$row->draft_id]['uid'] = $user->name;
    }
    if (isset($display_fields['title']) && $display_fields['title'] === 'title') {
      $entry[$row->draft_id]['title'] = $row->title;
    }
    if (isset($display_fields['body']) && $display_fields['body'] === 'body') {
      $entry[$row->draft_id]['body'] = $row->body;
    }
    if (isset($display_fields['updated']) && $display_fields['updated'] === 'updated') {
      $entry[$row->draft_id]['updated'] = format_date($row->updated, 'small');
    }
    if (isset($display_fields['cron_remove']) && $display_fields['cron_remove'] === 'cron_remove') {
      $entry[$row->draft_id]['cron_remove'] = ($row->cron_remove) ? t('No') : t('Yes');
    }
  }
  $output = theme('table', $header, $entry);
  $count = variable_get('draft_php_view_pager_count', 20);
  if (!is_numeric($count)) {
    $count = 20;
  }
  $output .= theme('pager', NULL, $count, 0);
  return $output;
}

/**
 * Menu callback for removing the draft from the database
 *
 * @param $draft_id
 *      ID of draft you wish to remove
 */
function draft_remove($draft_id = NULL) {
  if ($draft_id && is_numeric($draft_id)) {
    return drupal_get_form('draft_remove_form', $draft_id);
  }
  else {
    drupal_set_message(t('No draft id was received by the system'));
    $redirect = 'draft/list';
    if (module_exists('draft_views')) {
      $redirect = variable_get('draft_views_redirect_url', 'draft/list');
    }
    drupal_goto($redirect);
  }
}

/**
 * Confirmation form for removing the draft
 *
 * @param $form_state
 *      Array holding the initial form state
 * @param $draft_id
 *      ID of the draft we wish to remove
 */
function draft_remove_form(&$form_state, $draft_id) {
  $redirect = 'draft/list';
  if (module_exists('draft_views')) {
    $redirect = variable_get('draft_views_redirect_url', 'draft/list');
  }
  $form['draft_id'] = array('#type' => 'hidden', '#value' => $draft_id);
  return confirm_form($form,
         t('Are you sure you wish to remove the draft?'),
         $redirect,
         NULL,
         t('Delete'),
         t('Cancel'));
}

/**
 * Form Submit handler for removing the draft
 */
function draft_remove_form_submit($form, $form_state) {
  if (isset($form_state['values']['draft_id']) && is_numeric($form_state['values']['draft_id'])) {
    db_query("DELETE FROM {drafts} WHERE draft_id = %d", $form_state['values']['draft_id']);
    drupal_set_message(t('Draft successfully removed from the system'));
  }
  else {
    drupal_set_message(t('No draft id was received by the system'));
  }
  $redirect = 'draft/list';
  if (module_exists('draft_views')) {
    $redirect = variable_get('draft_views_redirect_url', 'draft/list');
  }
  drupal_goto($redirect);
}

/**
 * Ajax handler to save the draft into the system
 */
function draft_save() {
  global $user;
  $output = '';
  $node_id = NULL;
  $title = NULL;
  $body = NULL;
  // added per Flexer (Claudio)'s suggestion so the Devel module will not break the draft id being returned
  $GLOBALS['devel_shutdown'] = FALSE;
  // getting the type of node we need
  $type = $_POST['node_type'];
  unset($_POST['node_type']);
  $draft_id = $_POST['draft_id'];
  unset($_POST['draft_id']);

  if (module_exists('content')) {
    // checking for the title field to determine if it is in the POST array
    $title_field = variable_get('save_as_draft_title_'. $type, 'title');
    if (isset($_POST[trim($title_field)])) {
      $title = $_POST[trim($title_field)];
    }
    // checking for the body field to determine if it is in the POST array
    $body_field = variable_get('save_as_draft_body_'. $type, 'body');
    if (isset($_POST[trim($body_field)]) || isset($_POST[trim(str_replace("_field", "", $body_field))])) {
      if (isset($_POST[trim($body_field)])) {
        $body = $_POST[trim($body_field)];
      }
      else {
        $body = $_POST[trim(str_replace("_field", "", $body_field))];
      }
    }
  }
  else {
    // Fallback and try to check if title or body is set in the POST array
    if (isset($_POST['title'])) {
      $title = $_POST['title'];
    }
    if (isset($_POST['body'])) {
      $body = $_POST['body'];
    }
  }
  // data coming in via HTTP POST and we are serializing it
  $data = serialize($_POST);

  if (is_null($draft_id) || !is_numeric($draft_id)) {
    db_query("INSERT INTO {drafts} (node_type, uid, updated, title, body, data, cron_remove)
              VALUES ('%s', %d, %d, '%s', '%s', '%s', %d)",
              $type, $user->uid, time(), $title, $body, $data, 1);
    $draft_id = db_last_insert_id('drafts', 'draft_id');
  }
  else {
    // Verify if we have a draft in the database for this draft or not
    if (db_result(db_query("SELECT COUNT(*) FROM {drafts} WHERE draft_id = %d", $draft_id))) {
      db_query("UPDATE {drafts} SET title = '%s', body = '%s', data = '%s', updated = %d, cron_remove = %d WHERE draft_id = %d",
                $title, $body, $data, time(), 1, $draft_id);
    }
    else {
      // This is a fall back insert incase the draft is inadvertently deleted by someone so the system will still work
      db_query("INSERT INTO {drafts} (draft_id, node_type, uid, updated, title, body, data, cron_remove) VALUES (%d, '%s', %d, %d, '%s', '%s', '%s', %d)",
                $draft_id, $type, $user->uid, time(), $title, $body, $data, 1);
    }
  }
  print $draft_id;
  exit;
}

/**
 * Add form elements to the user account form
 */
function draft_user_form($edit, $user, $category = NULL) {
  $form = array();
  if ($category == 'account' && user_access('access save as draft')) {
    $form['draft'] = array(
      '#type' => 'fieldset',
      '#title' => t('Draft Autosave Settings'),
      '#tree' => TRUE,
      '#weight' => 2,
    );
    $form['draft']['draft_autosave'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Autosave'),
      '#default_value' => variable_get('draft_autosave_'. $user->uid, 0),
      '#description' => t('If checked autosave functionality will be enabled on administer specified node types'),
    );
    $form['draft']['draft_autosave_interval'] = array(
      '#type' => 'textfield',
      '#title' => t('Autosave Interval'),
      '#default_value' => variable_get('draft_autosave_interval_'. $user->uid, 30),
      '#description' => t('Time interval (Seconds) between autosaves, must be greater than 10'),
      '#size' => 6,
    );
  }
  return $form;
}

/**
 * Validate user input from the user account form
 */
function draft_user_validate($edit, $user) {
  if (isset($edit['draft']['draft_autosave_interval'])) {
    // Catch if the user tries to enter a non numeric value for the interval
    if (is_numeric($edit['draft']['draft_autosave_interval'])) {
      if ($edit['draft']['draft_autosave_interval'] < 10) {
        form_set_error('draft_autosave_interval', t('Autosave Interval must be greater than or equal to 10'));
      }
    }
    else {
      form_set_error('draft_autosave_interval', t('Autosave Interval must be a numeric value'));
    }
  }
}

/**
 * Update the user input from the user account form
 */
function draft_user_update($edit, $user, $category) {
  if ($category == 'account' && user_access('access save as draft')) {
    // If autosave value is set in the edit form we can set the variable otherwise reset to 0
    if (isset($edit['draft']['draft_autosave'])) {
      variable_set('draft_autosave_'. $user->uid, $edit['draft']['draft_autosave']);
    }
    else {
      variable_set('draft_autosave_'. $user->uid, 0);
    }
    // If the draft autosave interval is set and it is numeric then set it
    // If not numeric or not set, reset the value back to the draft interval for safety
    if (isset($edit['draft']['draft_autosave_interval']) && is_numeric($edit['draft']['draft_autosave_interval'])) {
      variable_set('draft_autosave_interval_'. $user->uid, $edit['draft']['draft_autosave_interval']);
    }
    else {
      variable_set('draft_autosave_interval_'. $user->uid, 30);
    }
  }
}

/**
 * Helper function to retrieve the fields for the node type
 *
 * @param $node_type
 *      Type of node we are currently operating on
 */
function _draft_content_type_fields($node_type = NULL) {
  $array = array('' => t('Select One'));
  $fields = array();
  if (!is_null($node_type) && drupal_strlen($node_type) > 0) {
    $cfields = content_types($node_type);
    // Do not do this for creation of new types
    if (is_array($cfields) && !empty($cfields)) {
      if (is_array($cfields['fields']) && !empty($cfields['fields'])) {
        // Traverse the fields so we can retrieve the information
        foreach ($cfields['fields'] as $k => $v) {
          if (isset($v['widget']['label'])) {
            $fields[$k] = $v['widget']['label'];
          }
          else {
            $fields[$k] = $k;
          }
        }
      }
      if (is_array($cfields['extra']) && !empty($cfields['extra'])) {
        // Traverse the Extra portion inside the node type
        foreach ($cfields['extra'] as $k => $v) {
          if (isset($v['label'])) {
            $fields[$k] = $v['label'];
          }
          else {
            $fields[$k] = $k;
          }
        }
      }
    }
    asort($fields);
  }
  return empty($fields) ? $array : $array += $fields;
}

/**
 * Return an associative array of the available display fields
 */
function _draft_php_view_display_fields() {
  return array(
    'node_type' => t('Node Type'),
    'uid' => t('Username'),
    'title' => t('Title'),
    'body' => t('Body'),
    'updated' => t('Last Update'),
    'cron_remove' => t('Cron Remove')
  );
}
